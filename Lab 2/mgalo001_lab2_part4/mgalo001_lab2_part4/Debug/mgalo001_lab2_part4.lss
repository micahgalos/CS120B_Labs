
mgalo001_lab2_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086e  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078b  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000297  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	90 c0       	rjmp	.+288    	; 0x1bc <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

// Library Header
#include <avr/io.h>

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	2c 97       	sbiw	r28, 0x0c	; 12
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF;	// Configure port A's 8 pins as outputs
  b2:	81 e2       	ldi	r24, 0x21	; 33
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
  ba:	82 e2       	ldi	r24, 0x22	; 34
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
	DDRB = 0x00; PORTB = 0xFF;	// Configure port B's 8 pins as outputs
  c4:	84 e2       	ldi	r24, 0x24	; 36
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	10 82       	st	Z, r1
  cc:	85 e2       	ldi	r24, 0x25	; 37
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	DDRC = 0x00; PORTC = 0xFF;	// Configure port C's 8 pins as outputs
  d6:	87 e2       	ldi	r24, 0x27	; 39
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	10 82       	st	Z, r1
  de:	88 e2       	ldi	r24, 0x28	; 40
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;	// Configure port D's 8 pins as outputs and initialize PORTD to 0
  e8:	8a e2       	ldi	r24, 0x2A	; 42
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	8b e2       	ldi	r24, 0x2B	; 43
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	10 82       	st	Z, r1
	
	unsigned char tmpA = 0x00; // PA0
  fa:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char tmpB = 0x00; // PB0
  fc:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char tmpC = 0x00; // PC0
  fe:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char tmpD = 0x00; // PD0
 100:	19 82       	std	Y+1, r1	; 0x01
	
	// Calculation variables for total weight and the weight balance
	unsigned long totWeight = 0x00;
 102:	1d 82       	std	Y+5, r1	; 0x05
 104:	1e 82       	std	Y+6, r1	; 0x06
 106:	1f 82       	std	Y+7, r1	; 0x07
 108:	18 86       	std	Y+8, r1	; 0x08
	unsigned long wBalance = 0x00;
 10a:	19 86       	std	Y+9, r1	; 0x09
 10c:	1a 86       	std	Y+10, r1	; 0x0a
 10e:	1b 86       	std	Y+11, r1	; 0x0b
 110:	1c 86       	std	Y+12, r1	; 0x0c
	
	while (1)
	{
		// 1) Read Inputs PA0 - PB0 - PC0
		tmpA = PINA;
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	80 81       	ld	r24, Z
 11a:	8a 83       	std	Y+2, r24	; 0x02
		tmpB = PINB;
 11c:	83 e2       	ldi	r24, 0x23	; 35
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	80 81       	ld	r24, Z
 124:	8b 83       	std	Y+3, r24	; 0x03
		tmpC = PINC; // NOTE: debugging using the middle four bits will cause those inputs to disappear, USE FIRST TWO 
 126:	86 e2       	ldi	r24, 0x26	; 38
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	8c 83       	std	Y+4, r24	; 0x04
		
		// total weight is the sum of PA0, PB0, and PC0
		totWeight = tmpA + tmpB + tmpC;
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	88 2f       	mov	r24, r24
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	28 0f       	add	r18, r24
 13e:	39 1f       	adc	r19, r25
 140:	8c 81       	ldd	r24, Y+4	; 0x04
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	82 0f       	add	r24, r18
 148:	93 1f       	adc	r25, r19
 14a:	09 2e       	mov	r0, r25
 14c:	00 0c       	add	r0, r0
 14e:	aa 0b       	sbc	r26, r26
 150:	bb 0b       	sbc	r27, r27
 152:	8d 83       	std	Y+5, r24	; 0x05
 154:	9e 83       	std	Y+6, r25	; 0x06
 156:	af 83       	std	Y+7, r26	; 0x07
 158:	b8 87       	std	Y+8, r27	; 0x08
		
		// weight balance is the difference of PA0 and PC0
		wBalance = tmpA - tmpC;
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	8c 81       	ldd	r24, Y+4	; 0x04
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	a9 01       	movw	r20, r18
 168:	48 1b       	sub	r20, r24
 16a:	59 0b       	sbc	r21, r25
 16c:	ca 01       	movw	r24, r20
 16e:	09 2e       	mov	r0, r25
 170:	00 0c       	add	r0, r0
 172:	aa 0b       	sbc	r26, r26
 174:	bb 0b       	sbc	r27, r27
 176:	89 87       	std	Y+9, r24	; 0x09
 178:	9a 87       	std	Y+10, r25	; 0x0a
 17a:	ab 87       	std	Y+11, r26	; 0x0b
 17c:	bc 87       	std	Y+12, r27	; 0x0c
		
		// if the total weight exceeds 140 kg
		if(totWeight > 140){ // in kilograms
 17e:	8d 81       	ldd	r24, Y+5	; 0x05
 180:	9e 81       	ldd	r25, Y+6	; 0x06
 182:	af 81       	ldd	r26, Y+7	; 0x07
 184:	b8 85       	ldd	r27, Y+8	; 0x08
 186:	8d 38       	cpi	r24, 0x8D	; 141
 188:	91 05       	cpc	r25, r1
 18a:	a1 05       	cpc	r26, r1
 18c:	b1 05       	cpc	r27, r1
 18e:	18 f0       	brcs	.+6      	; 0x196 <main+0xf8>
			tmpD = tmpD | 0x01;
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	81 60       	ori	r24, 0x01	; 1
 194:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// if the weight balance exceeds 80 kg
		if(wBalance > 80){ // in kilograms
 196:	89 85       	ldd	r24, Y+9	; 0x09
 198:	9a 85       	ldd	r25, Y+10	; 0x0a
 19a:	ab 85       	ldd	r26, Y+11	; 0x0b
 19c:	bc 85       	ldd	r27, Y+12	; 0x0c
 19e:	81 35       	cpi	r24, 0x51	; 81
 1a0:	91 05       	cpc	r25, r1
 1a2:	a1 05       	cpc	r26, r1
 1a4:	b1 05       	cpc	r27, r1
 1a6:	18 f0       	brcs	.+6      	; 0x1ae <main+0x110>
			tmpD = tmpD | 0x02;
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	89 83       	std	Y+1, r24	; 0x01
		}
		PORTD = tmpD & tmpD;	// Output the result of PD0
 1ae:	8b e2       	ldi	r24, 0x2B	; 43
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	29 81       	ldd	r18, Y+1	; 0x01
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
		tmpD = 0x00;	// Reinitialize PD0 to 0
 1b8:	19 82       	std	Y+1, r1	; 0x01
	}
 1ba:	ab cf       	rjmp	.-170    	; 0x112 <main+0x74>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
