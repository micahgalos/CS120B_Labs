
mgalo001_lab8_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000877  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cf  00000000  00000000  00000bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ef  00000000  00000000  000013a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000417  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009b  00000000  00000000  00001ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	08 d0       	rcall	.+16     	; 0xaa <main>
  9a:	ea c0       	rjmp	.+468    	; 0x270 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ADC_init>:
 */

#include <avr/io.h>

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 6e       	ori	r24, 0xE0	; 224
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

000000aa <main>:
	//        the previous conversion completes.
}

int main(void)
{
	DDRB = 0xFF; PORTB = 0x00; // B to output
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
  ae:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00; // D to output
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	1b b8       	out	0x0b, r1	; 11
	
	unsigned short max = 50;
	unsigned char tempB = 0x00;
	unsigned short x = 0x00;
	
	ADC_init();
  b4:	f4 df       	rcall	.-24     	; 0x9e <ADC_init>
{
	DDRB = 0xFF; PORTB = 0x00; // B to output
	DDRD = 0xFF; PORTD = 0x00; // D to output
	
	unsigned short max = 50;
	unsigned char tempB = 0x00;
  b6:	10 e0       	ldi	r17, 0x00	; 0
	
	ADC_init();
	
	// Start Execution Here
	while(1){
		x = ADC;
  b8:	0f 2e       	mov	r0, r31
  ba:	f8 e7       	ldi	r31, 0x78	; 120
  bc:	af 2e       	mov	r10, r31
  be:	b1 2c       	mov	r11, r1
  c0:	f0 2d       	mov	r31, r0
		
		if( x <= 0 ){
			tempB = 0x00;
  c2:	00 e0       	ldi	r16, 0x00	; 0
		}
		else if (x <= max * .125){ //multiply max by 1/8
			tempB = 0x01;
  c4:	99 24       	eor	r9, r9
  c6:	93 94       	inc	r9
		}
		else if( x <= max * .25){ //multiply max by 1/4
			tempB = 0x02;
  c8:	68 94       	set
  ca:	88 24       	eor	r8, r8
  cc:	81 f8       	bld	r8, 1
		}
		else if( x <= max * .375){ //multiply max by 3/8
			tempB = 0x04;
  ce:	68 94       	set
  d0:	77 24       	eor	r7, r7
  d2:	72 f8       	bld	r7, 2
		}
		else if( x <= max * .50){ //multiply max by 1/2
			tempB = 0x08;
  d4:	68 94       	set
  d6:	66 24       	eor	r6, r6
  d8:	63 f8       	bld	r6, 3
		}
		else if( x <= max * .625){ //multiply max by 5/8
			tempB = 0x10;
  da:	68 94       	set
  dc:	55 24       	eor	r5, r5
  de:	54 f8       	bld	r5, 4
		}
		else if( x <= max * .875){ //multiply max by 7/8
			tempB = 0x40;
		}
		else if( x <= max){
			tempB = 0x80;
  e0:	68 94       	set
  e2:	44 24       	eor	r4, r4
  e4:	47 f8       	bld	r4, 7
	
	ADC_init();
	
	// Start Execution Here
	while(1){
		x = ADC;
  e6:	f5 01       	movw	r30, r10
  e8:	c0 81       	ld	r28, Z
  ea:	d1 81       	ldd	r29, Z+1	; 0x01
		
		if( x <= 0 ){
  ec:	20 97       	sbiw	r28, 0x00	; 0
  ee:	09 f4       	brne	.+2      	; 0xf2 <main+0x48>
  f0:	49 c0       	rjmp	.+146    	; 0x184 <main+0xda>
			tempB = 0x00;
		}
		else if (x <= max * .125){ //multiply max by 1/8
  f2:	be 01       	movw	r22, r28
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	5a d0       	rcall	.+180    	; 0x1ae <__floatunsisf>
  fa:	6b 01       	movw	r12, r22
  fc:	7c 01       	movw	r14, r24
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	48 ec       	ldi	r20, 0xC8	; 200
 104:	50 e4       	ldi	r21, 0x40	; 64
 106:	4f d0       	rcall	.+158    	; 0x1a6 <__cmpsf2>
 108:	18 16       	cp	r1, r24
 10a:	0c f0       	brlt	.+2      	; 0x10e <main+0x64>
 10c:	3d c0       	rjmp	.+122    	; 0x188 <main+0xde>
			tempB = 0x01;
		}
		else if( x <= max * .25){ //multiply max by 1/4
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	48 e4       	ldi	r20, 0x48	; 72
 114:	51 e4       	ldi	r21, 0x41	; 65
 116:	c7 01       	movw	r24, r14
 118:	b6 01       	movw	r22, r12
 11a:	45 d0       	rcall	.+138    	; 0x1a6 <__cmpsf2>
 11c:	18 16       	cp	r1, r24
 11e:	0c f0       	brlt	.+2      	; 0x122 <main+0x78>
 120:	35 c0       	rjmp	.+106    	; 0x18c <main+0xe2>
			tempB = 0x02;
		}
		else if( x <= max * .375){ //multiply max by 3/8
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	46 e9       	ldi	r20, 0x96	; 150
 128:	51 e4       	ldi	r21, 0x41	; 65
 12a:	c7 01       	movw	r24, r14
 12c:	b6 01       	movw	r22, r12
 12e:	3b d0       	rcall	.+118    	; 0x1a6 <__cmpsf2>
 130:	18 16       	cp	r1, r24
 132:	74 f5       	brge	.+92     	; 0x190 <main+0xe6>
			tempB = 0x04;
		}
		else if( x <= max * .50){ //multiply max by 1/2
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	48 ec       	ldi	r20, 0xC8	; 200
 13a:	51 e4       	ldi	r21, 0x41	; 65
 13c:	c7 01       	movw	r24, r14
 13e:	b6 01       	movw	r22, r12
 140:	32 d0       	rcall	.+100    	; 0x1a6 <__cmpsf2>
 142:	18 16       	cp	r1, r24
 144:	3c f5       	brge	.+78     	; 0x194 <main+0xea>
			tempB = 0x08;
		}
		else if( x <= max * .625){ //multiply max by 5/8
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	4a ef       	ldi	r20, 0xFA	; 250
 14c:	51 e4       	ldi	r21, 0x41	; 65
 14e:	c7 01       	movw	r24, r14
 150:	b6 01       	movw	r22, r12
 152:	29 d0       	rcall	.+82     	; 0x1a6 <__cmpsf2>
 154:	18 16       	cp	r1, r24
 156:	04 f5       	brge	.+64     	; 0x198 <main+0xee>
			tempB = 0x10;
		}
		else if( x <= max * .75){ //multiply max by 3/4
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	46 e1       	ldi	r20, 0x16	; 22
 15e:	52 e4       	ldi	r21, 0x42	; 66
 160:	c7 01       	movw	r24, r14
 162:	b6 01       	movw	r22, r12
 164:	20 d0       	rcall	.+64     	; 0x1a6 <__cmpsf2>
 166:	18 16       	cp	r1, r24
 168:	cc f4       	brge	.+50     	; 0x19c <main+0xf2>
			tempB = 0x20;
		}
		else if( x <= max * .875){ //multiply max by 7/8
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	4f e2       	ldi	r20, 0x2F	; 47
 170:	52 e4       	ldi	r21, 0x42	; 66
 172:	c7 01       	movw	r24, r14
 174:	b6 01       	movw	r22, r12
 176:	17 d0       	rcall	.+46     	; 0x1a6 <__cmpsf2>
 178:	18 16       	cp	r1, r24
 17a:	94 f4       	brge	.+36     	; 0x1a0 <main+0xf6>
 17c:	e3 97       	sbiw	r28, 0x33	; 51
			tempB = 0x40;
		}
		else if( x <= max){
 17e:	88 f4       	brcc	.+34     	; 0x1a2 <main+0xf8>
 180:	14 2d       	mov	r17, r4
			tempB = 0x80;
 182:	0f c0       	rjmp	.+30     	; 0x1a2 <main+0xf8>
 184:	10 2f       	mov	r17, r16
	// Start Execution Here
	while(1){
		x = ADC;
		
		if( x <= 0 ){
			tempB = 0x00;
 186:	0d c0       	rjmp	.+26     	; 0x1a2 <main+0xf8>
 188:	19 2d       	mov	r17, r9
		}
		else if (x <= max * .125){ //multiply max by 1/8
			tempB = 0x01;
 18a:	0b c0       	rjmp	.+22     	; 0x1a2 <main+0xf8>
 18c:	18 2d       	mov	r17, r8
		}
		else if( x <= max * .25){ //multiply max by 1/4
			tempB = 0x02;
 18e:	09 c0       	rjmp	.+18     	; 0x1a2 <main+0xf8>
 190:	17 2d       	mov	r17, r7
		}
		else if( x <= max * .375){ //multiply max by 3/8
			tempB = 0x04;
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <main+0xf8>
 194:	16 2d       	mov	r17, r6
		}
		else if( x <= max * .50){ //multiply max by 1/2
			tempB = 0x08;
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <main+0xf8>
 198:	15 2d       	mov	r17, r5
		}
		else if( x <= max * .625){ //multiply max by 5/8
			tempB = 0x10;
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <main+0xf8>
 19c:	10 e2       	ldi	r17, 0x20	; 32
		}
		else if( x <= max * .75){ //multiply max by 3/4
			tempB = 0x20;
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <main+0xf8>
 1a0:	10 e4       	ldi	r17, 0x40	; 64
		}
		else if( x <= max * .875){ //multiply max by 7/8
			tempB = 0x40;
 1a2:	15 b9       	out	0x05, r17	; 5
		}
		else if( x <= max){
			tempB = 0x80;
		}

		PORTB = tempB;
 1a4:	a0 cf       	rjmp	.-192    	; 0xe6 <main+0x3c>

000001a6 <__cmpsf2>:
	}
 1a6:	40 d0       	rcall	.+128    	; 0x228 <__fp_cmp>
 1a8:	08 f4       	brcc	.+2      	; 0x1ac <__cmpsf2+0x6>
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	08 95       	ret

000001ae <__floatunsisf>:
 1ae:	e8 94       	clt
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <__floatsisf+0x12>

000001b2 <__floatsisf>:
 1b2:	97 fb       	bst	r25, 7
 1b4:	3e f4       	brtc	.+14     	; 0x1c4 <__floatsisf+0x12>
 1b6:	90 95       	com	r25
 1b8:	80 95       	com	r24
 1ba:	70 95       	com	r23
 1bc:	61 95       	neg	r22
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	8f 4f       	sbci	r24, 0xFF	; 255
 1c2:	9f 4f       	sbci	r25, 0xFF	; 255
 1c4:	99 23       	and	r25, r25
 1c6:	a9 f0       	breq	.+42     	; 0x1f2 <__floatsisf+0x40>
 1c8:	f9 2f       	mov	r31, r25
 1ca:	96 e9       	ldi	r25, 0x96	; 150
 1cc:	bb 27       	eor	r27, r27
 1ce:	93 95       	inc	r25
 1d0:	f6 95       	lsr	r31
 1d2:	87 95       	ror	r24
 1d4:	77 95       	ror	r23
 1d6:	67 95       	ror	r22
 1d8:	b7 95       	ror	r27
 1da:	f1 11       	cpse	r31, r1
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <__floatsisf+0x1c>
 1de:	fa f4       	brpl	.+62     	; 0x21e <__floatsisf+0x6c>
 1e0:	bb 0f       	add	r27, r27
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <__floatsisf+0x36>
 1e4:	60 ff       	sbrs	r22, 0
 1e6:	1b c0       	rjmp	.+54     	; 0x21e <__floatsisf+0x6c>
 1e8:	6f 5f       	subi	r22, 0xFF	; 255
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255
 1ec:	8f 4f       	sbci	r24, 0xFF	; 255
 1ee:	9f 4f       	sbci	r25, 0xFF	; 255
 1f0:	16 c0       	rjmp	.+44     	; 0x21e <__floatsisf+0x6c>
 1f2:	88 23       	and	r24, r24
 1f4:	11 f0       	breq	.+4      	; 0x1fa <__floatsisf+0x48>
 1f6:	96 e9       	ldi	r25, 0x96	; 150
 1f8:	11 c0       	rjmp	.+34     	; 0x21c <__floatsisf+0x6a>
 1fa:	77 23       	and	r23, r23
 1fc:	21 f0       	breq	.+8      	; 0x206 <__floatsisf+0x54>
 1fe:	9e e8       	ldi	r25, 0x8E	; 142
 200:	87 2f       	mov	r24, r23
 202:	76 2f       	mov	r23, r22
 204:	05 c0       	rjmp	.+10     	; 0x210 <__floatsisf+0x5e>
 206:	66 23       	and	r22, r22
 208:	71 f0       	breq	.+28     	; 0x226 <__floatsisf+0x74>
 20a:	96 e8       	ldi	r25, 0x86	; 134
 20c:	86 2f       	mov	r24, r22
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	2a f0       	brmi	.+10     	; 0x21e <__floatsisf+0x6c>
 214:	9a 95       	dec	r25
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	88 1f       	adc	r24, r24
 21c:	da f7       	brpl	.-10     	; 0x214 <__floatsisf+0x62>
 21e:	88 0f       	add	r24, r24
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	97 f9       	bld	r25, 7
 226:	08 95       	ret

00000228 <__fp_cmp>:
 228:	99 0f       	add	r25, r25
 22a:	00 08       	sbc	r0, r0
 22c:	55 0f       	add	r21, r21
 22e:	aa 0b       	sbc	r26, r26
 230:	e0 e8       	ldi	r30, 0x80	; 128
 232:	fe ef       	ldi	r31, 0xFE	; 254
 234:	16 16       	cp	r1, r22
 236:	17 06       	cpc	r1, r23
 238:	e8 07       	cpc	r30, r24
 23a:	f9 07       	cpc	r31, r25
 23c:	c0 f0       	brcs	.+48     	; 0x26e <__fp_cmp+0x46>
 23e:	12 16       	cp	r1, r18
 240:	13 06       	cpc	r1, r19
 242:	e4 07       	cpc	r30, r20
 244:	f5 07       	cpc	r31, r21
 246:	98 f0       	brcs	.+38     	; 0x26e <__fp_cmp+0x46>
 248:	62 1b       	sub	r22, r18
 24a:	73 0b       	sbc	r23, r19
 24c:	84 0b       	sbc	r24, r20
 24e:	95 0b       	sbc	r25, r21
 250:	39 f4       	brne	.+14     	; 0x260 <__fp_cmp+0x38>
 252:	0a 26       	eor	r0, r26
 254:	61 f0       	breq	.+24     	; 0x26e <__fp_cmp+0x46>
 256:	23 2b       	or	r18, r19
 258:	24 2b       	or	r18, r20
 25a:	25 2b       	or	r18, r21
 25c:	21 f4       	brne	.+8      	; 0x266 <__fp_cmp+0x3e>
 25e:	08 95       	ret
 260:	0a 26       	eor	r0, r26
 262:	09 f4       	brne	.+2      	; 0x266 <__fp_cmp+0x3e>
 264:	a1 40       	sbci	r26, 0x01	; 1
 266:	a6 95       	lsr	r26
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	81 1d       	adc	r24, r1
 26c:	81 1d       	adc	r24, r1
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
