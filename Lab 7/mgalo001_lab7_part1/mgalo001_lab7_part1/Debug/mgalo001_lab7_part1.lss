
mgalo001_lab7_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003a6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c5f  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d8  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063c  00000000  00000000  00001a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000020ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  000026d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000294e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a1 c0       	rjmp	.+322    	; 0x178 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	57 d1       	rcall	.+686    	; 0x372 <main>
  c4:	6e c1       	rjmp	.+732    	; 0x3a2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: Timer Off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_init>:
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	e1 df       	rcall	.-62     	; 0xc8 <delay_ms>
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	f2 df       	rcall	.-28     	; 0xee <LCD_WriteCommand>
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	f0 df       	rcall	.-32     	; 0xee <LCD_WriteCommand>
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	ee df       	rcall	.-36     	; 0xee <LCD_WriteCommand>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	ec df       	rcall	.-40     	; 0xee <LCD_WriteCommand>
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 cf       	rjmp	.-84     	; 0xc8 <delay_ms>
 11c:	08 95       	ret

0000011e <LCD_WriteData>:
 11e:	5e 9a       	sbi	0x0b, 6	; 11
 120:	88 b9       	out	0x08, r24	; 8
 122:	5f 9a       	sbi	0x0b, 7	; 11
 124:	00 00       	nop
 126:	5f 98       	cbi	0x0b, 7	; 11
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	cd cf       	rjmp	.-102    	; 0xc8 <delay_ms>
 12e:	08 95       	ret

00000130 <TimerOn>:
 130:	8b e0       	ldi	r24, 0x0B	; 11
 132:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 136:	8d e7       	ldi	r24, 0x7D	; 125
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 13e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 148:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 14c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 158:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 15c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 160:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 164:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 168:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 16c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 170:	8f b7       	in	r24, 0x3f	; 63
 172:	80 68       	ori	r24, 0x80	; 128
 174:	8f bf       	out	0x3f, r24	; 63
 176:	08 95       	ret

00000178 <__vector_13>:
}

// In this approach, the C Programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 18a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 18e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 192:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 196:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	a1 09       	sbc	r26, r1
 19e:	b1 09       	sbc	r27, r1
 1a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1a4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1a8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1ac:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) {	// Results in a more efficient Compare
 1b0:	89 2b       	or	r24, r25
 1b2:	8a 2b       	or	r24, r26
 1b4:	8b 2b       	or	r24, r27
 1b6:	99 f4       	brne	.+38     	; 0x1de <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: Timer Off
}

void TimerISR() {
	TimerFlag = 1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) {	// Results in a more efficient Compare
		TimerISR();	// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1ca:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1d2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1d6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1da:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 1f0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1f4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 200:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 204:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 208:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 20c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 210:	08 95       	ret

00000212 <Tick>:
}

void Tick()
{
	switch(state) // Start of State Transitions
 212:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	b9 f0       	breq	.+46     	; 0x248 <Tick+0x36>
 21a:	28 f4       	brcc	.+10     	; 0x226 <Tick+0x14>
 21c:	88 23       	and	r24, r24
 21e:	61 f0       	breq	.+24     	; 0x238 <Tick+0x26>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	71 f0       	breq	.+28     	; 0x240 <Tick+0x2e>
 224:	5f c0       	rjmp	.+190    	; 0x2e4 <Tick+0xd2>
 226:	85 30       	cpi	r24, 0x05	; 5
 228:	f1 f1       	breq	.+124    	; 0x2a6 <Tick+0x94>
 22a:	87 30       	cpi	r24, 0x07	; 7
 22c:	09 f4       	brne	.+2      	; 0x230 <Tick+0x1e>
 22e:	56 c0       	rjmp	.+172    	; 0x2dc <Tick+0xca>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	09 f0       	breq	.+2      	; 0x236 <Tick+0x24>
 234:	57 c0       	rjmp	.+174    	; 0x2e4 <Tick+0xd2>
 236:	1c c0       	rjmp	.+56     	; 0x270 <Tick+0x5e>
	{
		case Start:
		state = Init;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
		break;
 23e:	89 c0       	rjmp	.+274    	; 0x352 <Tick+0x140>
		
		case Init:
		state = wait1;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
		break;
 246:	08 95       	ret
		
		case wait1:
		if(button_A0){
 248:	00 99       	sbic	0x00, 0	; 0
 24a:	04 c0       	rjmp	.+8      	; 0x254 <Tick+0x42>
			state = Inc;
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 252:	7a c0       	rjmp	.+244    	; 0x348 <Tick+0x136>
		}
		else if(button_A1){
 254:	01 99       	sbic	0x00, 1	; 0
 256:	04 c0       	rjmp	.+8      	; 0x260 <Tick+0x4e>
			state = Dec;
 258:	85 e0       	ldi	r24, 0x05	; 5
 25a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 25e:	83 c0       	rjmp	.+262    	; 0x366 <Tick+0x154>
		}
		else if(button_A0 && button_A1){
 260:	00 99       	sbic	0x00, 0	; 0
 262:	86 c0       	rjmp	.+268    	; 0x370 <Tick+0x15e>
 264:	01 99       	sbic	0x00, 1	; 0
 266:	84 c0       	rjmp	.+264    	; 0x370 <Tick+0x15e>
			state = Reset;
 268:	87 e0       	ldi	r24, 0x07	; 7
 26a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 26e:	69 c0       	rjmp	.+210    	; 0x342 <Tick+0x130>
			state = wait1;
		}
		break;

		case Inc:
		if(!button_A0 && !button_A1){
 270:	00 9b       	sbis	0x00, 0	; 0
 272:	0d c0       	rjmp	.+26     	; 0x28e <Tick+0x7c>
 274:	01 9b       	sbis	0x00, 1	; 0
 276:	0b c0       	rjmp	.+22     	; 0x28e <Tick+0x7c>
			if(cnt < 9)
 278:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 27c:	89 30       	cpi	r24, 0x09	; 9
 27e:	18 f4       	brcc	.+6      	; 0x286 <Tick+0x74>
			++cnt;
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
			state = wait1;
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 28c:	08 95       	ret
		}
		else if (button_A0 && !button_A1){
 28e:	00 99       	sbic	0x00, 0	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <Tick+0x84>
 292:	01 99       	sbic	0x00, 1	; 0
 294:	59 c0       	rjmp	.+178    	; 0x348 <Tick+0x136>
			state = Inc;
		}
		else if(button_A0 && button_A1){
 296:	00 99       	sbic	0x00, 0	; 0
 298:	57 c0       	rjmp	.+174    	; 0x348 <Tick+0x136>
 29a:	01 99       	sbic	0x00, 1	; 0
 29c:	55 c0       	rjmp	.+170    	; 0x348 <Tick+0x136>
			state = Reset;
 29e:	87 e0       	ldi	r24, 0x07	; 7
 2a0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2a4:	4e c0       	rjmp	.+156    	; 0x342 <Tick+0x130>
		}
		break;

		case Dec:
		if(!button_A0 && !button_A1){
 2a6:	00 9b       	sbis	0x00, 0	; 0
 2a8:	0d c0       	rjmp	.+26     	; 0x2c4 <Tick+0xb2>
 2aa:	01 9b       	sbis	0x00, 1	; 0
 2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <Tick+0xb2>
			if(cnt > 0)
 2ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 2b2:	88 23       	and	r24, r24
 2b4:	19 f0       	breq	.+6      	; 0x2bc <Tick+0xaa>
			--cnt;
 2b6:	81 50       	subi	r24, 0x01	; 1
 2b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
			state = wait1;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2c2:	08 95       	ret
		}
		else if (!button_A0 && button_A1){
 2c4:	00 9b       	sbis	0x00, 0	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <Tick+0xba>
 2c8:	01 9b       	sbis	0x00, 1	; 0
 2ca:	4d c0       	rjmp	.+154    	; 0x366 <Tick+0x154>
			state = Dec;
		}
		else if(button_A0 && button_A1){
 2cc:	00 99       	sbic	0x00, 0	; 0
 2ce:	4b c0       	rjmp	.+150    	; 0x366 <Tick+0x154>
 2d0:	01 99       	sbic	0x00, 1	; 0
 2d2:	49 c0       	rjmp	.+146    	; 0x366 <Tick+0x154>
			state = Reset;
 2d4:	87 e0       	ldi	r24, 0x07	; 7
 2d6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2da:	33 c0       	rjmp	.+102    	; 0x342 <Tick+0x130>
		}
		break;

		case Reset:
		state = Init;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
		break;
 2e2:	37 c0       	rjmp	.+110    	; 0x352 <Tick+0x140>

		default:
		state = Start;
 2e4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <state>
		break;
 2e8:	08 95       	ret
		LCD_WriteData(cnt + '0');
		break;
		
		case Inc:
		if(i < 9){
			i++;
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <i>
		}
		if(i == 9 && cnt < 9){
 2f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 2f4:	89 30       	cpi	r24, 0x09	; 9
 2f6:	49 f4       	brne	.+18     	; 0x30a <Tick+0xf8>
 2f8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 2fc:	89 30       	cpi	r24, 0x09	; 9
 2fe:	28 f4       	brcc	.+10     	; 0x30a <Tick+0xf8>
			++cnt;
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
			i = 0;
 306:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
		}
		LCD_init();
 30a:	fa de       	rcall	.-524    	; 0x100 <LCD_init>
		LCD_WriteData(cnt + '0');
 30c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 310:	80 5d       	subi	r24, 0xD0	; 208
 312:	05 cf       	rjmp	.-502    	; 0x11e <LCD_WriteData>
		break;
 314:	08 95       	ret

		case Dec:
		if(i < 9){
			i++;
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <i>
		}
		if(i == 9 && cnt > 0){
 31c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 320:	89 30       	cpi	r24, 0x09	; 9
 322:	49 f4       	brne	.+18     	; 0x336 <Tick+0x124>
 324:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 328:	88 23       	and	r24, r24
 32a:	29 f0       	breq	.+10     	; 0x336 <Tick+0x124>
			--cnt;
 32c:	81 50       	subi	r24, 0x01	; 1
 32e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
			i = 0;
 332:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
		}
		LCD_init();
 336:	e4 de       	rcall	.-568    	; 0x100 <LCD_init>
		LCD_WriteData(cnt + '0');
 338:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 33c:	80 5d       	subi	r24, 0xD0	; 208
 33e:	ef ce       	rjmp	.-546    	; 0x11e <LCD_WriteData>
		break;

		default:
		break;
	}	// End of State Actions
}
 340:	08 95       	ret
		LCD_init();
		LCD_WriteData(cnt + '0');
		break;

		case Reset:
		cnt = 0x00;
 342:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
		break;
 346:	08 95       	ret
		LCD_init();
		LCD_WriteData(cnt + '0');
		break;
		
		case Inc:
		if(i < 9){
 348:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 34c:	89 30       	cpi	r24, 0x09	; 9
 34e:	68 f2       	brcs	.-102    	; 0x2ea <Tick+0xd8>
 350:	cf cf       	rjmp	.-98     	; 0x2f0 <Tick+0xde>
	{
		case Start:
		break;

		case Init:
		i = 0x00;
 352:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
		cnt = 0x00;
 356:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
		LCD_init();
		LCD_WriteData(cnt + '0');
 35a:	d2 de       	rcall	.-604    	; 0x100 <LCD_init>
 35c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 360:	80 5d       	subi	r24, 0xD0	; 208
 362:	dd ce       	rjmp	.-582    	; 0x11e <LCD_WriteData>
		break;
 364:	08 95       	ret
		LCD_init();
		LCD_WriteData(cnt + '0');
		break;

		case Dec:
		if(i < 9){
 366:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 36a:	89 30       	cpi	r24, 0x09	; 9
 36c:	a0 f2       	brcs	.-88     	; 0x316 <Tick+0x104>
 36e:	d6 cf       	rjmp	.-84     	; 0x31c <Tick+0x10a>
 370:	08 95       	ret

00000372 <main>:
	}	// End of State Actions
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure Port A's 8 pins as Inputs, Initialize to 1's
 372:	11 b8       	out	0x01, r1	; 1
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // LCD Data Lines
 378:	87 b9       	out	0x07, r24	; 7
 37a:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD Control Lines
 37c:	8a b9       	out	0x0a, r24	; 10
 37e:	1b b8       	out	0x0b, r1	; 11
	
	state = Start;
 380:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <state>
	TimerSet(100);
 384:	64 e6       	ldi	r22, 0x64	; 100
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	31 df       	rcall	.-414    	; 0x1f0 <TimerSet>
	TimerOn();
 38e:	d0 de       	rcall	.-608    	; 0x130 <TimerOn>
	LCD_init();
 390:	b7 de       	rcall	.-658    	; 0x100 <LCD_init>
 392:	3f df       	rcall	.-386    	; 0x212 <Tick>
	
	while (1)
	{
		Tick();
 394:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
		while(!TimerFlag){}
 398:	88 23       	and	r24, r24
 39a:	e1 f3       	breq	.-8      	; 0x394 <main+0x22>
 39c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		TimerFlag = 0;
 3a0:	f8 cf       	rjmp	.-16     	; 0x392 <main+0x20>

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
	}
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
