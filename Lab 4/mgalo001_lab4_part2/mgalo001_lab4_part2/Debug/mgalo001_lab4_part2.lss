
mgalo001_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000276  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d6  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f1  00000000  00000000  00000bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000384  00000000  00000000  000013df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000420  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001cb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	81 d0       	rcall	.+258    	; 0x1ac <main>
  aa:	a9 c0       	rjmp	.+338    	; 0x1fe <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
enum States {Start, Init, Inc, Dec, Reset} state;
	
	unsigned char tmpA = 0x00;
	unsigned char tmpC = 0x00;

void Tick(){
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch(state){ // Transitions
  b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	71 f1       	breq	.+92     	; 0x120 <Tick+0x72>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	91 05       	cpc	r25, r1
  c8:	2c f4       	brge	.+10     	; 0xd4 <Tick+0x26>
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	49 f0       	breq	.+18     	; 0xe0 <Tick+0x32>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	59 f0       	breq	.+22     	; 0xe8 <Tick+0x3a>
  d2:	32 c0       	rjmp	.+100    	; 0x138 <Tick+0x8a>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	39 f1       	breq	.+78     	; 0x128 <Tick+0x7a>
  da:	04 97       	sbiw	r24, 0x04	; 4
  dc:	49 f1       	breq	.+82     	; 0x130 <Tick+0x82>
  de:	2c c0       	rjmp	.+88     	; 0x138 <Tick+0x8a>
		case Start:
		state = Init; // --> Initial State
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
  e6:	2b c0       	rjmp	.+86     	; 0x13e <Tick+0x90>
		
		case Init:
		if(tmpA == 0x01){
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	21 f4       	brne	.+8      	; 0xf8 <Tick+0x4a>
		state = Inc; // --> Increment State
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		state = Reset; // --> Reset State
		}
		else{
		state = Init; // --> Initial State
		}
		break;
  f6:	23 c0       	rjmp	.+70     	; 0x13e <Tick+0x90>
		
		case Init:
		if(tmpA == 0x01){
		state = Inc; // --> Increment State
		}
		else if(tmpA == 0x02){
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	21 f4       	brne	.+8      	; 0x108 <Tick+0x5a>
		state = Dec; // --> Decrement State
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		state = Reset; // --> Reset State
		}
		else{
		state = Init; // --> Initial State
		}
		break;
 106:	1b c0       	rjmp	.+54     	; 0x13e <Tick+0x90>
		state = Inc; // --> Increment State
		}
		else if(tmpA == 0x02){
		state = Dec; // --> Decrement State
		}
		else if(tmpA == 0x03){
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	21 f4       	brne	.+8      	; 0x118 <Tick+0x6a>
		state = Reset; // --> Reset State
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		}
		else{
		state = Init; // --> Initial State
		}
		break;
 116:	13 c0       	rjmp	.+38     	; 0x13e <Tick+0x90>
		}
		else if(tmpA == 0x03){
		state = Reset; // --> Reset State
		}
		else{
		state = Init; // --> Initial State
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		}
		break;
 11e:	0f c0       	rjmp	.+30     	; 0x13e <Tick+0x90>
		
		case Inc:
		state = Init; // --> Initial State
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 126:	0b c0       	rjmp	.+22     	; 0x13e <Tick+0x90>
		
		case Dec:
		state = Init; // --> Initial State
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 12e:	07 c0       	rjmp	.+14     	; 0x13e <Tick+0x90>
		
		case Reset:
		state = Init; // --> Initial State
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 136:	03 c0       	rjmp	.+6      	; 0x13e <Tick+0x90>
		
		default:
		state = Start; // --> Start State
 138:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
		break;
 13c:	00 00       	nop
	}
	
	switch(state){ // State Actions
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	82 30       	cpi	r24, 0x02	; 2
 148:	91 05       	cpc	r25, r1
 14a:	71 f0       	breq	.+28     	; 0x168 <Tick+0xba>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	91 05       	cpc	r25, r1
 150:	2c f4       	brge	.+10     	; 0x15c <Tick+0xae>
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	01 f1       	breq	.+64     	; 0x196 <Tick+0xe8>
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	01 f1       	breq	.+64     	; 0x19a <Tick+0xec>
		case Reset:
		tmpC = 0x00;
		break;
		
		default:
		break;
 15a:	24 c0       	rjmp	.+72     	; 0x1a4 <Tick+0xf6>
		default:
		state = Start; // --> Start State
		break;
	}
	
	switch(state){ // State Actions
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	91 05       	cpc	r25, r1
 160:	69 f0       	breq	.+26     	; 0x17c <Tick+0xce>
 162:	04 97       	sbiw	r24, 0x04	; 4
 164:	a9 f0       	breq	.+42     	; 0x190 <Tick+0xe2>
		case Reset:
		tmpC = 0x00;
		break;
		
		default:
		break;
 166:	1e c0       	rjmp	.+60     	; 0x1a4 <Tick+0xf6>
		
		case Init:
		break;
		
		case Inc:
		if(tmpC < 9){
 168:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 16c:	89 30       	cpi	r24, 0x09	; 9
 16e:	b8 f4       	brcc	.+46     	; 0x19e <Tick+0xf0>
		++tmpC;
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		}
		break;
 17a:	11 c0       	rjmp	.+34     	; 0x19e <Tick+0xf0>
		
		case Dec:
		if(tmpC > 0){
 17c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 180:	88 23       	and	r24, r24
 182:	79 f0       	breq	.+30     	; 0x1a2 <Tick+0xf4>
		--tmpC;
 184:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		}
		break;
 18e:	09 c0       	rjmp	.+18     	; 0x1a2 <Tick+0xf4>
		
		case Reset:
		tmpC = 0x00;
 190:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tmpC>
		break;
 194:	07 c0       	rjmp	.+14     	; 0x1a4 <Tick+0xf6>
		break;
	}
	
	switch(state){ // State Actions
		case Start: 
		break;
 196:	00 00       	nop
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <Tick+0xf6>
		
		case Init:
		break;
 19a:	00 00       	nop
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <Tick+0xf6>
		
		case Inc:
		if(tmpC < 9){
		++tmpC;
		}
		break;
 19e:	00 00       	nop
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <Tick+0xf6>
		
		case Dec:
		if(tmpC > 0){
		--tmpC;
		}
		break;
 1a2:	00 00       	nop
		break;
		
		default:
		break;
	}
}
 1a4:	00 00       	nop
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <main>:

int main(void)
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Configure Port A's 8 pins as Inputs, Initialize to 1's.
 1b4:	81 e2       	ldi	r24, 0x21	; 33
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fc 01       	movw	r30, r24
 1ba:	10 82       	st	Z, r1
 1bc:	82 e2       	ldi	r24, 0x22	; 34
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00; // Configure Port C's 8 pins as Outputs, Initialize to 0's.
 1c6:	87 e2       	ldi	r24, 0x27	; 39
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	fc 01       	movw	r30, r24
 1d6:	10 82       	st	Z, r1
	
	tmpC = 0x07; // Initialize to 7 for output
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
	state = Start;
 1de:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
	
	while (1)
	{
		tmpA = PINA; // Reads inputs of PINA
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	fc 01       	movw	r30, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		PORTC = tmpC; // Outputs the inc or dec value of tempC
 1ee:	88 e2       	ldi	r24, 0x28	; 40
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpC>
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
		Tick();
 1fa:	59 df       	rcall	.-334    	; 0xae <Tick>
	}
 1fc:	f2 cf       	rjmp	.-28     	; 0x1e2 <main+0x36>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
