
mgalo001_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c8  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f1  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000330  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	8f d0       	rcall	.+286    	; 0x1c8 <main>
  aa:	bb c0       	rjmp	.+374    	; 0x222 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <SetBit>:

// Library Header
#include <avr/io.h>

// Bit-Access Functions
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <SetBit+0x6>
  b4:	1f 92       	push	r1
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	6a 83       	std	Y+2, r22	; 0x02
  be:	4b 83       	std	Y+3, r20	; 0x03
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c0:	8b 81       	ldd	r24, Y+3	; 0x03
  c2:	88 23       	and	r24, r24
  c4:	71 f0       	breq	.+28     	; 0xe2 <SetBit+0x34>
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <SetBit+0x28>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	2a 95       	dec	r18
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <SetBit+0x24>
  da:	98 2f       	mov	r25, r24
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	89 2b       	or	r24, r25
  e0:	0e c0       	rjmp	.+28     	; 0xfe <SetBit+0x50>
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	28 2f       	mov	r18, r24
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <SetBit+0x44>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <SetBit+0x40>
  f6:	98 2f       	mov	r25, r24
  f8:	90 95       	com	r25
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	89 23       	and	r24, r25
}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <Tick>:
	
	unsigned char tmpA = 0x00; // LED sensor
	unsigned char tmpB = 0x00; // LED light toggle
	
void Tick()
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	switch(state){ // State Transitions
 112:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	91 05       	cpc	r25, r1
 11e:	49 f0       	breq	.+18     	; 0x132 <Tick+0x28>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	91 05       	cpc	r25, r1
 124:	91 f0       	breq	.+36     	; 0x14a <Tick+0x40>
 126:	89 2b       	or	r24, r25
 128:	e1 f4       	brne	.+56     	; 0x162 <Tick+0x58>
		case Init:
		state = S1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 130:	1b c0       	rjmp	.+54     	; 0x168 <Tick+0x5e>
		case S1:
		if(tmpA) {
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 136:	88 23       	and	r24, r24
 138:	21 f0       	breq	.+8      	; 0x142 <Tick+0x38>
			state = S2;
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		}
		else{
		state = S1;
		}
		break;
 140:	13 c0       	rjmp	.+38     	; 0x168 <Tick+0x5e>
		case S1:
		if(tmpA) {
			state = S2;
		}
		else{
		state = S1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		}
		break;
 148:	0f c0       	rjmp	.+30     	; 0x168 <Tick+0x5e>
		
		case S2:
		if(tmpA) {
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14e:	88 23       	and	r24, r24
 150:	21 f0       	breq	.+8      	; 0x15a <Tick+0x50>
			state = S1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		}
		else{
		state = S2;
		}
		break;
 158:	07 c0       	rjmp	.+14     	; 0x168 <Tick+0x5e>
		case S2:
		if(tmpA) {
			state = S1;
		}
		else{
		state = S2;
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		}
		break;
 160:	03 c0       	rjmp	.+6      	; 0x168 <Tick+0x5e>
		
		default:
		state = Init;
 162:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
		break;
 166:	00 00       	nop
	}
	
	switch(state){ // State Actions
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	91 05       	cpc	r25, r1
 174:	31 f0       	breq	.+12     	; 0x182 <Tick+0x78>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	91 05       	cpc	r25, r1
 17a:	91 f0       	breq	.+36     	; 0x1a0 <Tick+0x96>
 17c:	89 2b       	or	r24, r25
 17e:	f9 f0       	breq	.+62     	; 0x1be <Tick+0xb4>
		tmpB = SetBit(tmpB, 0, 0);
		tmpB = SetBit(tmpB, 1, 1);
		break;
		
		default:
		break;
 180:	1f c0       	rjmp	.+62     	; 0x1c0 <Tick+0xb6>
	switch(state){ // State Actions
		case Init:
		break;
		
		case S1:
		tmpB = SetBit(tmpB, 0, 1);
 182:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpB>
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	91 df       	rcall	.-222    	; 0xae <SetBit>
 18c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
		tmpB = SetBit(tmpB, 1, 0);
 190:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpB>
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	8a df       	rcall	.-236    	; 0xae <SetBit>
 19a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
		break;
 19e:	10 c0       	rjmp	.+32     	; 0x1c0 <Tick+0xb6>
		
		case S2:
		tmpB = SetBit(tmpB, 0, 0);
 1a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpB>
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	82 df       	rcall	.-252    	; 0xae <SetBit>
 1aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
		tmpB = SetBit(tmpB, 1, 1);
 1ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpB>
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	7b df       	rcall	.-266    	; 0xae <SetBit>
 1b8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
		break;
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <Tick+0xb6>
		break;
	}
	
	switch(state){ // State Actions
		case Init:
		break;
 1be:	00 00       	nop
		break;
		
		default:
		break;
	}
}
 1c0:	00 00       	nop
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <main>:

int main(void)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0x00; PORTA = 0xFF; // Configure Port A's all 8 pins as Inputs
 1d0:	81 e2       	ldi	r24, 0x21	; 33
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	fc 01       	movw	r30, r24
 1d6:	10 82       	st	Z, r1
 1d8:	82 e2       	ldi	r24, 0x22	; 34
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
    DDRB = 0xFF; PORTB = 0x00; // Configure Port B's 8 pins as Outputs, Initialize to 0s.
 1e2:	84 e2       	ldi	r24, 0x24	; 36
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
 1ec:	85 e2       	ldi	r24, 0x25	; 37
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	10 82       	st	Z, r1
    
    tmpB = SetBit(tmpB, 0, 1);
 1f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpB>
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	58 df       	rcall	.-336    	; 0xae <SetBit>
 1fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
    state = Init;
 202:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
    
    // Start execution here
    while (1) 
    {
		tmpA = PINA;
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		Tick();
 212:	7b df       	rcall	.-266    	; 0x10a <Tick>
		PORTB = tmpB;		
 214:	85 e2       	ldi	r24, 0x25	; 37
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpB>
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
    }
 220:	f2 cf       	rjmp	.-28     	; 0x206 <main+0x3e>

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
