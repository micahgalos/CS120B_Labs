
mgalo001_lab4_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000021e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d3  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ff  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000338  00000000  00000000  0000142a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b1  00000000  00000000  00001c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	76 d0       	rcall	.+236    	; 0x1b0 <main>
  c4:	aa c0       	rjmp	.+340    	; 0x21a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Button_Sequence>:
unsigned char tmpA = 0x00;
unsigned char tmpB = 0x00;
unsigned char sequence[4] = {0x04, 0x01, 0x02, 0x01};
unsigned char i = 0x00;

void Button_Sequence(){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	if(tmpA == sequence[i]) {
  d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i>
  d4:	88 2f       	mov	r24, r24
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	80 50       	subi	r24, 0x00	; 0
  da:	9f 4f       	sbci	r25, 0xFF	; 255
  dc:	fc 01       	movw	r30, r24
  de:	90 81       	ld	r25, Z
  e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
  e4:	98 17       	cp	r25, r24
  e6:	31 f4       	brne	.+12     	; 0xf4 <Button_Sequence+0x2c>
		++i;
  e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i>
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i>
		// Does nothing since user has not let go of previous input
	}
	else{
	i = 0x00;
	}
}
  f2:	14 c0       	rjmp	.+40     	; 0x11c <Button_Sequence+0x54>

void Button_Sequence(){
	if(tmpA == sequence[i]) {
		++i;
	}
	else if(i != 0 && tmpA == sequence[i - 1]) {
  f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i>
  f8:	88 23       	and	r24, r24
  fa:	69 f0       	breq	.+26     	; 0x116 <Button_Sequence+0x4e>
  fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i>
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	80 50       	subi	r24, 0x00	; 0
 108:	9f 4f       	sbci	r25, 0xFF	; 255
 10a:	fc 01       	movw	r30, r24
 10c:	90 81       	ld	r25, Z
 10e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 112:	98 17       	cp	r25, r24
 114:	19 f0       	breq	.+6      	; 0x11c <Button_Sequence+0x54>
		// Does nothing since user has not let go of previous input
	}
	else{
	i = 0x00;
 116:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <i>
	}
}
 11a:	00 c0       	rjmp	.+0      	; 0x11c <Button_Sequence+0x54>
 11c:	00 00       	nop
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <Tick>:

void Tick(){
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	switch(state) { // State Transitions
 12c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <state>
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	91 05       	cpc	r25, r1
 138:	49 f0       	breq	.+18     	; 0x14c <Tick+0x28>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	91 05       	cpc	r25, r1
 13e:	91 f0       	breq	.+36     	; 0x164 <Tick+0x40>
 140:	89 2b       	or	r24, r25
 142:	a1 f4       	brne	.+40     	; 0x16c <Tick+0x48>
		case Init:		// Initial State
		state = S1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		break;
 14a:	13 c0       	rjmp	.+38     	; 0x172 <Tick+0x4e>
		
		case S1:		// Next Transition
		if(i == 4){
 14c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i>
 150:	84 30       	cpi	r24, 0x04	; 4
 152:	31 f4       	brne	.+12     	; 0x160 <Tick+0x3c>
			state = S2;
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
			i = 0;
 15a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <i>
		}
		else{
		Button_Sequence();
		}
		break;
 15e:	09 c0       	rjmp	.+18     	; 0x172 <Tick+0x4e>
		if(i == 4){
			state = S2;
			i = 0;
		}
		else{
		Button_Sequence();
 160:	b3 df       	rcall	.-154    	; 0xc8 <Button_Sequence>
		}
		break;
 162:	07 c0       	rjmp	.+14     	; 0x172 <Tick+0x4e>
		
		case S2:		// Next Transition
		state = S1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		break;
 16a:	03 c0       	rjmp	.+6      	; 0x172 <Tick+0x4e>
		
		default:
		state = Init;
 16c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
		break;
 170:	00 00       	nop
		
	}
	
	switch(state) { // State Actions 
 172:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <state>
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	91 05       	cpc	r25, r1
 17e:	89 f0       	breq	.+34     	; 0x1a2 <Tick+0x7e>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	91 05       	cpc	r25, r1
 184:	19 f0       	breq	.+6      	; 0x18c <Tick+0x68>
 186:	89 2b       	or	r24, r25
 188:	71 f0       	breq	.+28     	; 0x1a6 <Tick+0x82>
		tmpB  = 0x01;
		}
		break;
		
		default:
		break;
 18a:	0e c0       	rjmp	.+28     	; 0x1a8 <Tick+0x84>
		
		case S1:
		break;
		
		case S2:
		if(tmpB == 0x01){
 18c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tmpB>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	19 f4       	brne	.+6      	; 0x19a <Tick+0x76>
		tmpB = 0x00;
 194:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tmpB>
		}
		else{
		tmpB  = 0x01;
		}
		break;
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <Tick+0x84>
		case S2:
		if(tmpB == 0x01){
		tmpB = 0x00;
		}
		else{
		tmpB  = 0x01;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpB>
		}
		break;
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <Tick+0x84>
	switch(state) { // State Actions 
		case Init:
		break;
		
		case S1:
		break;
 1a2:	00 00       	nop
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <Tick+0x84>
		
	}
	
	switch(state) { // State Actions 
		case Init:
		break;
 1a6:	00 00       	nop
		break;
		
		default:
		break;
	}
}
 1a8:	00 00       	nop
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <main>:

int main(void)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Configure Port A's 8 pins as Inputs, Initialize to 1's
 1b8:	81 e2       	ldi	r24, 0x21	; 33
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	10 82       	st	Z, r1
 1c0:	82 e2       	ldi	r24, 0x22	; 34
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; // Configure Port B's 8 pins as Outputs, Initialize to 0's
 1ca:	84 e2       	ldi	r24, 0x24	; 36
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
 1d4:	85 e2       	ldi	r24, 0x25	; 37
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // Configure Port C's 8 pins as Outputs, Initialize to 0's
 1dc:	87 e2       	ldi	r24, 0x27	; 39
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
 1e6:	88 e2       	ldi	r24, 0x28	; 40
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	10 82       	st	Z, r1
	
	state = Init;	// Initial State
 1ee:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
	
	// Start Execution Here
    while (1)
    {
	    tmpA = PINA;
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	    PORTB = tmpB;
 1fe:	85 e2       	ldi	r24, 0x25	; 37
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <tmpB>
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
	    Tick();
 20a:	8c df       	rcall	.-232    	; 0x124 <Tick>
	    PORTC = state;
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <state>
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
    }
 218:	ec cf       	rjmp	.-40     	; 0x1f2 <main+0x42>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
