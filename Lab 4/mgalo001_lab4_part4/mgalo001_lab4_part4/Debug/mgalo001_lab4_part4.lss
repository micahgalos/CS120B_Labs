
mgalo001_lab4_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088a  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000322  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040d  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	63 d0       	rcall	.+198    	; 0x170 <main>
  aa:	97 c0       	rjmp	.+302    	; 0x1da <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
enum States {Init, S1, S2, S3} state;

unsigned char tmpA = 0x00;
unsigned char tmpB = 0x00;

void Tick(){
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch(state) { // State Transitions
  b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	81 f0       	breq	.+32     	; 0xe4 <Tick+0x36>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	91 05       	cpc	r25, r1
  c8:	1c f4       	brge	.+6      	; 0xd0 <Tick+0x22>
  ca:	89 2b       	or	r24, r25
  cc:	39 f0       	breq	.+14     	; 0xdc <Tick+0x2e>
  ce:	26 c0       	rjmp	.+76     	; 0x11c <Tick+0x6e>
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	91 05       	cpc	r25, r1
  d4:	99 f0       	breq	.+38     	; 0xfc <Tick+0x4e>
  d6:	03 97       	sbiw	r24, 0x03	; 3
  d8:	e9 f0       	breq	.+58     	; 0x114 <Tick+0x66>
  da:	20 c0       	rjmp	.+64     	; 0x11c <Tick+0x6e>
		case Init:
		state = S1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
  e2:	1f c0       	rjmp	.+62     	; 0x122 <Tick+0x74>
		
		case S1:
		if(tmpA == 0x04){
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e8:	84 30       	cpi	r24, 0x04	; 4
  ea:	21 f4       	brne	.+8      	; 0xf4 <Tick+0x46>
		state = S2;
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		}
		else{
		state = S1;
		}
		break;
  f2:	17 c0       	rjmp	.+46     	; 0x122 <Tick+0x74>
		case S1:
		if(tmpA == 0x04){
		state = S2;
		}
		else{
		state = S1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		}
		break;
  fa:	13 c0       	rjmp	.+38     	; 0x122 <Tick+0x74>
		
		case S2:
		if(tmpA == 0x02){
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	21 f4       	brne	.+8      	; 0x10c <Tick+0x5e>
		state = S3;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		}
		else{
		state = S1;
		}
		break;
 10a:	0b c0       	rjmp	.+22     	; 0x122 <Tick+0x74>
		case S2:
		if(tmpA == 0x02){
		state = S3;
		}
		else{
		state = S1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		}
		break;
 112:	07 c0       	rjmp	.+14     	; 0x122 <Tick+0x74>
		
		case S3:
		state = S1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 11a:	03 c0       	rjmp	.+6      	; 0x122 <Tick+0x74>
		
		default:
		state = Init;
 11c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
		break;
 120:	00 00       	nop
	}
	
	switch(state) { // State Actions
 122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	91 05       	cpc	r25, r1
 12e:	b9 f0       	breq	.+46     	; 0x15e <Tick+0xb0>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	91 05       	cpc	r25, r1
 134:	1c f4       	brge	.+6      	; 0x13c <Tick+0x8e>
 136:	89 2b       	or	r24, r25
 138:	a1 f0       	breq	.+40     	; 0x162 <Tick+0xb4>
		tmpB  = 0x01;
		}
		break;
		
		default:
		break;
 13a:	16 c0       	rjmp	.+44     	; 0x168 <Tick+0xba>
		default:
		state = Init;
		break;
	}
	
	switch(state) { // State Actions
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	91 05       	cpc	r25, r1
 140:	91 f0       	breq	.+36     	; 0x166 <Tick+0xb8>
 142:	03 97       	sbiw	r24, 0x03	; 3
 144:	09 f0       	breq	.+2      	; 0x148 <Tick+0x9a>
		tmpB  = 0x01;
		}
		break;
		
		default:
		break;
 146:	10 c0       	rjmp	.+32     	; 0x168 <Tick+0xba>
		
		case S2:
		break;
		
		case S3:
		if(tmpB == 0x00){
 148:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpB>
 14c:	88 23       	and	r24, r24
 14e:	19 f4       	brne	.+6      	; 0x156 <Tick+0xa8>
		tmpB = 0x00;
 150:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tmpB>
		}
		else{
		tmpB  = 0x01;
		}
		break;
 154:	09 c0       	rjmp	.+18     	; 0x168 <Tick+0xba>
		case S3:
		if(tmpB == 0x00){
		tmpB = 0x00;
		}
		else{
		tmpB  = 0x01;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
		}
		break;
 15c:	05 c0       	rjmp	.+10     	; 0x168 <Tick+0xba>
	switch(state) { // State Actions
		case Init:
		break;
		
		case S1:
		break;
 15e:	00 00       	nop
 160:	03 c0       	rjmp	.+6      	; 0x168 <Tick+0xba>
		break;
	}
	
	switch(state) { // State Actions
		case Init:
		break;
 162:	00 00       	nop
 164:	01 c0       	rjmp	.+2      	; 0x168 <Tick+0xba>
		
		case S1:
		break;
		
		case S2:
		break;
 166:	00 00       	nop
		break;
		
		default:
		break;
	}
}
 168:	00 00       	nop
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <main>:

int main(void)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Configure Port A's 8 pins as Inputs, Initialize to 1's.
 178:	81 e2       	ldi	r24, 0x21	; 33
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	10 82       	st	Z, r1
 180:	82 e2       	ldi	r24, 0x22	; 34
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; // Configure Port B's 8 pins as Outputs, Initialize to 0's.
 18a:	84 e2       	ldi	r24, 0x24	; 36
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
 194:	85 e2       	ldi	r24, 0x25	; 37
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // Configure Port C's 8 pins as Outputs, Initialize to 0's.
 19c:	87 e2       	ldi	r24, 0x27	; 39
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18
 1a6:	88 e2       	ldi	r24, 0x28	; 40
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	fc 01       	movw	r30, r24
 1ac:	10 82       	st	Z, r1
	
	state = Init;
 1ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
	
	// Start Execution Here
	while (1)
	{
		tmpA = PINA;
 1b2:	80 e2       	ldi	r24, 0x20	; 32
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	fc 01       	movw	r30, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		PORTB = tmpB;
 1be:	85 e2       	ldi	r24, 0x25	; 37
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpB>
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
		Tick();
 1ca:	71 df       	rcall	.-286    	; 0xae <Tick>
		PORTC = state;
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <state>
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
	}
 1d8:	ec cf       	rjmp	.-40     	; 0x1b2 <main+0x42>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
