
mgalo001_lab3_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084f  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078d  00000000  00000000  00000a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000273  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	56 c0       	rjmp	.+172    	; 0x148 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}*/

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFE; PORTB = 0x01; // Configure Port B's 8 pins as Outputs, set to 1 for bit 0 exclusively
  aa:	84 e2       	ldi	r24, 0x24	; 36
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2e ef       	ldi	r18, 0xFE	; 254
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
  b4:	85 e2       	ldi	r24, 0x25	; 37
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	DDRD = 0x00; PORTD = 0xFF; // Configure Port D's 8 pins as Inputs
  be:	8a e2       	ldi	r24, 0x2A	; 42
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	10 82       	st	Z, r1
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
	
	unsigned char tmpB0 = 0x00; // bit flag
  d0:	1b 82       	std	Y+3, r1	; 0x03
	unsigned short tmpB1 = 0x00; // total weight
  d2:	1a 82       	std	Y+2, r1	; 0x02
  d4:	19 82       	std	Y+1, r1	; 0x01
	unsigned char tmpD = 0x00; // passenger weight
  d6:	1c 82       	std	Y+4, r1	; 0x04
	 
	// Start Execution Here
	while (1)
	{
		tmpD = PIND;
  d8:	89 e2       	ldi	r24, 0x29	; 41
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	fc 01       	movw	r30, r24
  de:	80 81       	ld	r24, Z
  e0:	8c 83       	std	Y+4, r24	; 0x04
		tmpB0 = PINB & 0x01;
  e2:	83 e2       	ldi	r24, 0x23	; 35
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	80 81       	ld	r24, Z
  ea:	81 70       	andi	r24, 0x01	; 1
  ec:	8b 83       	std	Y+3, r24	; 0x03
		
		tmpB1 = tmpD + (tmpB0 * 255);   
  ee:	8c 81       	ldd	r24, Y+4	; 0x04
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	48 2f       	mov	r20, r24
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	6f ef       	ldi	r22, 0xFF	; 255
  fc:	64 9f       	mul	r22, r20
  fe:	c0 01       	movw	r24, r0
 100:	65 9f       	mul	r22, r21
 102:	90 0d       	add	r25, r0
 104:	11 24       	eor	r1, r1
 106:	82 0f       	add	r24, r18
 108:	93 1f       	adc	r25, r19
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01
		
		if(tmpD >= 70){
 10e:	8c 81       	ldd	r24, Y+4	; 0x04
 110:	86 34       	cpi	r24, 0x46	; 70
 112:	40 f0       	brcs	.+16     	; 0x124 <main+0x86>
			tmpB1 = (tmpB1 & 0x01) | 0x01 << 2;
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	81 70       	andi	r24, 0x01	; 1
 11a:	99 27       	eor	r25, r25
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	9a 83       	std	Y+2, r25	; 0x02
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	0a c0       	rjmp	.+20     	; 0x138 <main+0x9a>
			
		}
		else if(tmpD >= 5){
 124:	8c 81       	ldd	r24, Y+4	; 0x04
 126:	85 30       	cpi	r24, 0x05	; 5
 128:	28 f0       	brcs	.+10     	; 0x134 <main+0x96>
			tmpB1 = ((tmpB1 & 0x01) | 0x01) << 1;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	02 c0       	rjmp	.+4      	; 0x138 <main+0x9a>
		}
		else{
			tmpB1 = 0x00;
 134:	1a 82       	std	Y+2, r1	; 0x02
 136:	19 82       	std	Y+1, r1	; 0x01
		}
		
		PORTB = tmpB1;
 138:	85 e2       	ldi	r24, 0x25	; 37
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	29 81       	ldd	r18, Y+1	; 0x01
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
		tmpB1 = 0x00;
 142:	1a 82       	std	Y+2, r1	; 0x02
 144:	19 82       	std	Y+1, r1	; 0x01
	}
 146:	c8 cf       	rjmp	.-112    	; 0xd8 <main+0x3a>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
