
mgalo001_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087b  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00000b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000329  00000000  00000000  000012e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000404  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	20 d0       	rcall	.+64     	; 0xda <main>
  9a:	95 c0       	rjmp	.+298    	; 0x1c6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <GetBit>:

// Function Accessors: Bit-access function
/*unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}*/
unsigned char GetBit(unsigned char x, unsigned char k) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <GetBit+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	89 83       	std	Y+1, r24	; 0x01
  aa:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	88 2f       	mov	r24, r24
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a 81       	ldd	r18, Y+2	; 0x02
  b4:	22 2f       	mov	r18, r18
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <GetBit+0x20>
  ba:	95 95       	asr	r25
  bc:	87 95       	ror	r24
  be:	2a 95       	dec	r18
  c0:	e2 f7       	brpl	.-8      	; 0xba <GetBit+0x1c>
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	99 27       	eor	r25, r25
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	89 2b       	or	r24, r25
  ca:	09 f4       	brne	.+2      	; 0xce <GetBit+0x30>
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	82 2f       	mov	r24, r18
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:

int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x6>
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  e6:	81 e2       	ldi	r24, 0x21	; 33
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	10 82       	st	Z, r1
  ee:	82 e2       	ldi	r24, 0x22	; 34
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00; // Configure port C's 8 pins as outputs, set to 0
  f8:	87 e2       	ldi	r24, 0x27	; 39
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	10 82       	st	Z, r1
	
	unsigned char tmpA0 = 0x00; // Initialize PA0 to 0 
 10a:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char tmpA1 = 0x00; // Initialize PA1 to 0
 10c:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char tmpC = 0x00; // Initialize PC to 0
 10e:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		tmpA0 = PINA & 0x0F; // Read input for fuel levels 
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	8a 83       	std	Y+2, r24	; 0x02
		tmpA1 = PINA & 0x70; // Read input for PA4, PA5, and PA6
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	80 81       	ld	r24, Z
 124:	80 77       	andi	r24, 0x70	; 112
 126:	8b 83       	std	Y+3, r24	; 0x03
		
		if(tmpA0 == 1 || tmpA0 == 2){ // tmpC is PC5 [0x20]
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	19 f0       	breq	.+6      	; 0x134 <main+0x5a>
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	11 f4       	brne	.+4      	; 0x138 <main+0x5e>
			tmpC = 0x20;
 134:	80 e2       	ldi	r24, 0x20	; 32
 136:	89 83       	std	Y+1, r24	; 0x01
		}
		if(tmpA0 == 3 || tmpA0 == 4){ // tmpC is PC5-PC4 [0x30]
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	19 f0       	breq	.+6      	; 0x144 <main+0x6a>
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	84 30       	cpi	r24, 0x04	; 4
 142:	11 f4       	brne	.+4      	; 0x148 <main+0x6e>
			tmpC = 0x30;
 144:	80 e3       	ldi	r24, 0x30	; 48
 146:	89 83       	std	Y+1, r24	; 0x01
		}
		if(tmpA0 == 5 || tmpA0 == 6){ // tmpC is PC5-PC3 [0x38]
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	85 30       	cpi	r24, 0x05	; 5
 14c:	19 f0       	breq	.+6      	; 0x154 <main+0x7a>
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	86 30       	cpi	r24, 0x06	; 6
 152:	11 f4       	brne	.+4      	; 0x158 <main+0x7e>
			tmpC = 0x38;
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	89 83       	std	Y+1, r24	; 0x01
		}
		if(tmpA0 >= 7 && tmpA0 <= 9){ // tmpC is PC5-PC2 [0x3C]
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	87 30       	cpi	r24, 0x07	; 7
 15c:	28 f0       	brcs	.+10     	; 0x168 <main+0x8e>
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	8a 30       	cpi	r24, 0x0A	; 10
 162:	10 f4       	brcc	.+4      	; 0x168 <main+0x8e>
			tmpC = 0x3C;
 164:	8c e3       	ldi	r24, 0x3C	; 60
 166:	89 83       	std	Y+1, r24	; 0x01
		}						
		if(tmpA0 >= 10 && tmpA0 <= 12){ // tmpC is PC5-PC1 [0x3E]
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	8a 30       	cpi	r24, 0x0A	; 10
 16c:	28 f0       	brcs	.+10     	; 0x178 <main+0x9e>
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	8d 30       	cpi	r24, 0x0D	; 13
 172:	10 f4       	brcc	.+4      	; 0x178 <main+0x9e>
			tmpC = 0x3E;
 174:	8e e3       	ldi	r24, 0x3E	; 62
 176:	89 83       	std	Y+1, r24	; 0x01
		}
		if(tmpA0 >= 13 && tmpA0 <= 15){ // tmpC is PC5-PC0 [0x3F]
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	8d 30       	cpi	r24, 0x0D	; 13
 17c:	28 f0       	brcs	.+10     	; 0x188 <main+0xae>
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	80 31       	cpi	r24, 0x10	; 16
 182:	10 f4       	brcc	.+4      	; 0x188 <main+0xae>
			tmpC = 0x3F;
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	89 83       	std	Y+1, r24	; 0x01
		}
		if(tmpA0 < 4){ // tmpC is PA6 [0x40]
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	84 30       	cpi	r24, 0x04	; 4
 18c:	18 f4       	brcc	.+6      	; 0x194 <main+0xba>
			tmpC += 0x40;
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	80 5c       	subi	r24, 0xC0	; 192
 192:	89 83       	std	Y+1, r24	; 0x01
		}		
		// PA4 is 1 if a key is in the ignition, PA5 is one if a driver is seated, and PA6 is 0 if seatbelt is not fastened
		if(!GetBit(tmpA1, 6) && GetBit(tmpA1, 5) && GetBit(tmpA1, 4)){
 194:	66 e0       	ldi	r22, 0x06	; 6
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	82 df       	rcall	.-252    	; 0x9e <GetBit>
 19a:	88 23       	and	r24, r24
 19c:	69 f4       	brne	.+26     	; 0x1b8 <main+0xde>
 19e:	65 e0       	ldi	r22, 0x05	; 5
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	7d df       	rcall	.-262    	; 0x9e <GetBit>
 1a4:	88 23       	and	r24, r24
 1a6:	41 f0       	breq	.+16     	; 0x1b8 <main+0xde>
 1a8:	64 e0       	ldi	r22, 0x04	; 4
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	78 df       	rcall	.-272    	; 0x9e <GetBit>
 1ae:	88 23       	and	r24, r24
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <main+0xde>
			tmpC += 0x80;
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	80 58       	subi	r24, 0x80	; 128
 1b6:	89 83       	std	Y+1, r24	; 0x01
		}
		else{
			tmpC = tmpC;
		}		
		PORTC = tmpC; // Outputs the resulting sensor
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	29 81       	ldd	r18, Y+1	; 0x01
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
		tmpC = 0x00; // Resets the value from result
 1c2:	19 82       	std	Y+1, r1	; 0x01
	}
 1c4:	a5 cf       	rjmp	.-182    	; 0x110 <main+0x36>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
