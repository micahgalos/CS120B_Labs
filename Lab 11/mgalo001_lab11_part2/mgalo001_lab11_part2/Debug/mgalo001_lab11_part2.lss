
mgalo001_lab11_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000032e  000003c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800148  00800148  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e52  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bf  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c1  00000000  00000000  00001d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000023f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a5  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000533  00000000  00000000  00002b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 34       	cpi	r26, 0x48	; 72
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e4       	ldi	r26, 0x48	; 72
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 35       	cpi	r26, 0x58	; 88
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e1 d0       	rcall	.+450    	; 0x286 <main>
  c4:	32 c1       	rjmp	.+612    	; 0x32a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
  ec:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
  f0:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
  f4:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
  f8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_avr_timer_cntcurr>
  fc:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <_avr_timer_cntcurr+0x1>
 100:	a0 93 55 01 	sts	0x0155, r26	; 0x800155 <_avr_timer_cntcurr+0x2>
 104:	b0 93 56 01 	sts	0x0156, r27	; 0x800156 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_avr_timer_cntcurr>
 126:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 55 01 	lds	r26, 0x0155	; 0x800155 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_avr_timer_cntcurr>
 13c:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <_avr_timer_cntcurr+0x1>
 140:	a0 93 55 01 	sts	0x0155, r26	; 0x800155 <_avr_timer_cntcurr+0x2>
 144:	b0 93 56 01 	sts	0x0156, r27	; 0x800156 <_avr_timer_cntcurr+0x3>
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <TimerFlag>
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 15a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 15e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 162:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 166:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_avr_timer_cntcurr>
 16a:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 55 01 	sts	0x0155, r26	; 0x800155 <_avr_timer_cntcurr+0x2>
 172:	b0 93 56 01 	sts	0x0156, r27	; 0x800156 <_avr_timer_cntcurr+0x3>
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:
 188:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 18c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 190:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 194:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
 198:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <_avr_timer_cntcurr>
 19c:	70 93 54 01 	sts	0x0154, r23	; 0x800154 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	5e 98       	cbi	0x0b, 6	; 11
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	00 00       	nop
 1d8:	5f 98       	cbi	0x0b, 7	; 11
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_Cursor>:
 1e2:	81 31       	cpi	r24, 0x11	; 17
 1e4:	18 f4       	brcc	.+6      	; 0x1ec <LCD_Cursor+0xa>
 1e6:	81 58       	subi	r24, 0x81	; 129
 1e8:	f3 cf       	rjmp	.-26     	; 0x1d0 <LCD_WriteCommand>
 1ea:	08 95       	ret
 1ec:	81 55       	subi	r24, 0x51	; 81
 1ee:	f0 cf       	rjmp	.-32     	; 0x1d0 <LCD_WriteCommand>
 1f0:	08 95       	ret

000001f2 <LCD_init>:
 1f2:	84 e6       	ldi	r24, 0x64	; 100
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	d9 df       	rcall	.-78     	; 0x1aa <delay_ms>
 1f8:	88 e3       	ldi	r24, 0x38	; 56
 1fa:	ea df       	rcall	.-44     	; 0x1d0 <LCD_WriteCommand>
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	e8 df       	rcall	.-48     	; 0x1d0 <LCD_WriteCommand>
 200:	8f e0       	ldi	r24, 0x0F	; 15
 202:	e6 df       	rcall	.-52     	; 0x1d0 <LCD_WriteCommand>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	e4 df       	rcall	.-56     	; 0x1d0 <LCD_WriteCommand>
 208:	8a e0       	ldi	r24, 0x0A	; 10
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	ce cf       	rjmp	.-100    	; 0x1aa <delay_ms>
 20e:	08 95       	ret

00000210 <LCD_WriteData>:
 210:	5e 9a       	sbi	0x0b, 6	; 11
 212:	88 b9       	out	0x08, r24	; 8
 214:	5f 9a       	sbi	0x0b, 7	; 11
 216:	00 00       	nop
 218:	5f 98       	cbi	0x0b, 7	; 11
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	c5 cf       	rjmp	.-118    	; 0x1aa <delay_ms>
 220:	08 95       	ret

00000222 <SMTick1>:
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	8c 01       	movw	r16, r24
 22e:	89 2b       	or	r24, r25
 230:	19 f5       	brne	.+70     	; 0x278 <SMTick1+0x56>
 232:	c1 e0       	ldi	r28, 0x01	; 1
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	ff 24       	eor	r15, r15
 238:	f3 94       	inc	r15
 23a:	8c 2f       	mov	r24, r28
 23c:	d2 df       	rcall	.-92     	; 0x1e2 <LCD_Cursor>
 23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 242:	fe 01       	movw	r30, r28
 244:	eb 5f       	subi	r30, 0xFB	; 251
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	e8 0f       	add	r30, r24
 24a:	f1 1d       	adc	r31, r1
 24c:	32 97       	sbiw	r30, 0x02	; 2
 24e:	80 81       	ld	r24, Z
 250:	df df       	rcall	.-66     	; 0x210 <LCD_WriteData>
 252:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 256:	9e 01       	movw	r18, r28
 258:	28 0f       	add	r18, r24
 25a:	31 1d       	adc	r19, r1
 25c:	23 34       	cpi	r18, 0x43	; 67
 25e:	31 05       	cpc	r19, r1
 260:	11 f4       	brne	.+4      	; 0x266 <SMTick1+0x44>
 262:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <__data_start>
 266:	21 96       	adiw	r28, 0x01	; 1
 268:	c1 31       	cpi	r28, 0x11	; 17
 26a:	d1 05       	cpc	r29, r1
 26c:	31 f7       	brne	.-52     	; 0x23a <SMTick1+0x18>
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 278:	c8 01       	movw	r24, r16
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	08 95       	ret

00000286 <main>:

int main()
{
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	81 b9       	out	0x01, r24	; 1
 28a:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 28c:	84 b9       	out	0x04, r24	; 4
 28e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 290:	90 ef       	ldi	r25, 0xF0	; 240
 292:	97 b9       	out	0x07, r25	; 7
 294:	9f e0       	ldi	r25, 0x0F	; 15
 296:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
 298:	8a b9       	out	0x0a, r24	; 10
 29a:	1b b8       	out	0x0b, r1	; 11
	static task task1;
	task *tasks[] = { &task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = 0;//Task initial state.
 29c:	e8 e4       	ldi	r30, 0x48	; 72
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	10 82       	st	Z, r1
	task1.period = SMTick1_period;//Task Period.
 2a2:	88 ec       	ldi	r24, 0xC8	; 200
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	a0 e0       	ldi	r26, 0x00	; 0
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	81 83       	std	Z+1, r24	; 0x01
 2ac:	92 83       	std	Z+2, r25	; 0x02
 2ae:	a3 83       	std	Z+3, r26	; 0x03
 2b0:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 2b2:	85 83       	std	Z+5, r24	; 0x05
 2b4:	96 83       	std	Z+6, r25	; 0x06
 2b6:	a7 83       	std	Z+7, r26	; 0x07
 2b8:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 2ba:	81 e1       	ldi	r24, 0x11	; 17
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	92 87       	std	Z+10, r25	; 0x0a
 2c0:	81 87       	std	Z+9, r24	; 0x09


	// Set the timer and turn it on
	TimerSet(GCD);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	5e df       	rcall	.-324    	; 0x188 <TimerSet>
	TimerOn();
 2cc:	fd de       	rcall	.-518    	; 0xc8 <TimerOn>
	LCD_init();
 2ce:	91 df       	rcall	.-222    	; 0x1f2 <LCD_init>
 2d0:	c8 e4       	ldi	r28, 0x48	; 72
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime >= tasks[i]->period ) {
 2d2:	d1 e0       	ldi	r29, 0x01	; 1
 2d4:	4d 81       	ldd	r20, Y+5	; 0x05
 2d6:	5e 81       	ldd	r21, Y+6	; 0x06
 2d8:	6f 81       	ldd	r22, Y+7	; 0x07
 2da:	78 85       	ldd	r23, Y+8	; 0x08
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	9a 81       	ldd	r25, Y+2	; 0x02
 2e0:	ab 81       	ldd	r26, Y+3	; 0x03
 2e2:	bc 81       	ldd	r27, Y+4	; 0x04
 2e4:	48 17       	cp	r20, r24
 2e6:	59 07       	cpc	r21, r25
 2e8:	6a 07       	cpc	r22, r26
 2ea:	7b 07       	cpc	r23, r27
 2ec:	60 f0       	brcs	.+24     	; 0x306 <main+0x80>
 2ee:	88 81       	ld	r24, Y
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 2f0:	e9 85       	ldd	r30, Y+9	; 0x09
 2f2:	fa 85       	ldd	r31, Y+10	; 0x0a
 2f4:	08 2e       	mov	r0, r24
 2f6:	00 0c       	add	r0, r0
 2f8:	99 0b       	sbc	r25, r25
 2fa:	09 95       	icall
 2fc:	88 83       	st	Y, r24
 2fe:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 300:	1e 82       	std	Y+6, r1	; 0x06
 302:	1f 82       	std	Y+7, r1	; 0x07
 304:	18 86       	std	Y+8, r1	; 0x08
 306:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 308:	9e 81       	ldd	r25, Y+6	; 0x06
 30a:	af 81       	ldd	r26, Y+7	; 0x07
 30c:	b8 85       	ldd	r27, Y+8	; 0x08
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	a1 1d       	adc	r26, r1
 312:	b1 1d       	adc	r27, r1
 314:	8d 83       	std	Y+5, r24	; 0x05
 316:	9e 83       	std	Y+6, r25	; 0x06
 318:	af 83       	std	Y+7, r26	; 0x07
 31a:	b8 87       	std	Y+8, r27	; 0x08
 31c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <TimerFlag>
		}
		while(!TimerFlag);
 320:	88 23       	and	r24, r24
 322:	e1 f3       	breq	.-8      	; 0x31c <main+0x96>
 324:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <TimerFlag>
		TimerFlag = 0;
 328:	d5 cf       	rjmp	.-86     	; 0x2d4 <main+0x4e>

0000032a <_exit>:
	}
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
