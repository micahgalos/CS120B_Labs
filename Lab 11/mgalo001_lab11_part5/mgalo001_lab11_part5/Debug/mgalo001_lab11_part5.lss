
mgalo001_lab11_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000526  000005ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000526  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080011e  0080011e  000005d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef0  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ad  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b8  00000000  00000000  00001f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f1  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f7  00000000  00000000  00002da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 33       	cpi	r26, 0x3A	; 58
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9e d1       	rcall	.+828    	; 0x400 <main>
  c4:	2e c2       	rjmp	.+1116   	; 0x522 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
  ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
  f0:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
  f4:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
  f8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_avr_timer_cntcurr>
  fc:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <_avr_timer_cntcurr+0x1>
 100:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <_avr_timer_cntcurr+0x2>
 104:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <_avr_timer_cntcurr>
 126:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_avr_timer_cntcurr>
 13c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <_avr_timer_cntcurr+0x1>
 140:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <_avr_timer_cntcurr+0x2>
 144:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <_avr_timer_cntcurr+0x3>
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <TimerFlag>
 156:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 15a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 15e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 162:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 166:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_avr_timer_cntcurr>
 16a:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <_avr_timer_cntcurr+0x2>
 172:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <_avr_timer_cntcurr+0x3>
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:
 188:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 18c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 190:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 194:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
 198:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <_avr_timer_cntcurr>
 19c:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	5e 98       	cbi	0x0b, 6	; 11
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	00 00       	nop
 1d8:	5f 98       	cbi	0x0b, 7	; 11
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_Cursor>:
 1e8:	81 31       	cpi	r24, 0x11	; 17
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <LCD_Cursor+0xa>
 1ec:	81 58       	subi	r24, 0x81	; 129
 1ee:	f0 cf       	rjmp	.-32     	; 0x1d0 <LCD_WriteCommand>
 1f0:	08 95       	ret
 1f2:	81 55       	subi	r24, 0x51	; 81
 1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <LCD_WriteCommand>
 1f6:	08 95       	ret

000001f8 <SMTick2>:
 1f8:	84 30       	cpi	r24, 0x04	; 4
 1fa:	91 05       	cpc	r25, r1
 1fc:	54 f4       	brge	.+20     	; 0x212 <SMTick2+0x1a>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	91 05       	cpc	r25, r1
 202:	0c f0       	brlt	.+2      	; 0x206 <SMTick2+0xe>
 204:	40 c0       	rjmp	.+128    	; 0x286 <SMTick2+0x8e>
 206:	00 97       	sbiw	r24, 0x00	; 0
 208:	59 f0       	breq	.+22     	; 0x220 <SMTick2+0x28>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	91 05       	cpc	r25, r1
 20e:	99 f0       	breq	.+38     	; 0x236 <SMTick2+0x3e>
 210:	24 c0       	rjmp	.+72     	; 0x25a <SMTick2+0x62>
 212:	84 30       	cpi	r24, 0x04	; 4
 214:	91 05       	cpc	r25, r1
 216:	f1 f0       	breq	.+60     	; 0x254 <SMTick2+0x5c>
 218:	85 30       	cpi	r24, 0x05	; 5
 21a:	91 05       	cpc	r25, r1
 21c:	79 f1       	breq	.+94     	; 0x27c <SMTick2+0x84>
 21e:	1d c0       	rjmp	.+58     	; 0x25a <SMTick2+0x62>
 220:	30 9b       	sbis	0x06, 0	; 6
 222:	52 c0       	rjmp	.+164    	; 0x2c8 <SMTick2+0xd0>
 224:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <lose>
 228:	81 11       	cpse	r24, r1
 22a:	28 c0       	rjmp	.+80     	; 0x27c <SMTick2+0x84>
 22c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 230:	88 23       	and	r24, r24
 232:	49 f1       	breq	.+82     	; 0x286 <SMTick2+0x8e>
 234:	23 c0       	rjmp	.+70     	; 0x27c <SMTick2+0x84>
 236:	30 9b       	sbis	0x06, 0	; 6
 238:	4a c0       	rjmp	.+148    	; 0x2ce <SMTick2+0xd6>
 23a:	31 9b       	sbis	0x06, 1	; 6
 23c:	30 c0       	rjmp	.+96     	; 0x29e <SMTick2+0xa6>
 23e:	32 9b       	sbis	0x06, 2	; 6
 240:	28 c0       	rjmp	.+80     	; 0x292 <SMTick2+0x9a>
 242:	31 e0       	ldi	r19, 0x01	; 1
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <lose>
 24a:	81 11       	cpse	r24, r1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	83 2f       	mov	r24, r19
 250:	92 2f       	mov	r25, r18
 252:	03 c0       	rjmp	.+6      	; 0x25a <SMTick2+0x62>
 254:	30 99       	sbic	0x06, 0	; 6
 256:	29 c0       	rjmp	.+82     	; 0x2aa <SMTick2+0xb2>
 258:	08 95       	ret
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	91 05       	cpc	r25, r1
 25e:	f9 f0       	breq	.+62     	; 0x29e <SMTick2+0xa6>
 260:	34 f4       	brge	.+12     	; 0x26e <SMTick2+0x76>
 262:	00 97       	sbiw	r24, 0x00	; 0
 264:	59 f0       	breq	.+22     	; 0x27c <SMTick2+0x84>
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	91 05       	cpc	r25, r1
 26a:	99 f5       	brne	.+102    	; 0x2d2 <SMTick2+0xda>
 26c:	0c c0       	rjmp	.+24     	; 0x286 <SMTick2+0x8e>
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	91 05       	cpc	r25, r1
 272:	79 f0       	breq	.+30     	; 0x292 <SMTick2+0x9a>
 274:	85 30       	cpi	r24, 0x05	; 5
 276:	91 05       	cpc	r25, r1
 278:	c1 f0       	breq	.+48     	; 0x2aa <SMTick2+0xb2>
 27a:	08 95       	ret
 27c:	81 e1       	ldi	r24, 0x11	; 17
 27e:	b4 df       	rcall	.-152    	; 0x1e8 <LCD_Cursor>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	08 95       	ret
 286:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cursor>
 28a:	ae df       	rcall	.-164    	; 0x1e8 <LCD_Cursor>
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	08 95       	ret
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cursor>
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	08 95       	ret
 29e:	81 e1       	ldi	r24, 0x11	; 17
 2a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cursor>
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	29 f4       	brne	.+10     	; 0x2bc <SMTick2+0xc4>
 2b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 2b6:	85 e0       	ldi	r24, 0x05	; 5
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	08 95       	ret
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	08 95       	ret
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	08 95       	ret
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	08 95       	ret

000002d4 <LCD_init>:
 2d4:	84 e6       	ldi	r24, 0x64	; 100
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	68 df       	rcall	.-304    	; 0x1aa <delay_ms>
 2da:	88 e3       	ldi	r24, 0x38	; 56
 2dc:	79 df       	rcall	.-270    	; 0x1d0 <LCD_WriteCommand>
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	77 df       	rcall	.-274    	; 0x1d0 <LCD_WriteCommand>
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	75 df       	rcall	.-278    	; 0x1d0 <LCD_WriteCommand>
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	73 df       	rcall	.-282    	; 0x1d0 <LCD_WriteCommand>
 2ea:	8a e0       	ldi	r24, 0x0A	; 10
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	5d cf       	rjmp	.-326    	; 0x1aa <delay_ms>
 2f0:	08 95       	ret

000002f2 <LCD_WriteData>:
 2f2:	5e 9a       	sbi	0x0b, 6	; 11
 2f4:	88 b9       	out	0x08, r24	; 8
 2f6:	5f 9a       	sbi	0x0b, 7	; 11
 2f8:	00 00       	nop
 2fa:	5f 98       	cbi	0x0b, 7	; 11
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	54 cf       	rjmp	.-344    	; 0x1aa <delay_ms>
 302:	08 95       	ret

00000304 <LCD_DisplayString>:
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	18 2f       	mov	r17, r24
 30e:	eb 01       	movw	r28, r22
 310:	68 df       	rcall	.-304    	; 0x1e2 <LCD_ClearScreen>
 312:	88 81       	ld	r24, Y
 314:	88 23       	and	r24, r24
 316:	51 f0       	breq	.+20     	; 0x32c <LCD_DisplayString+0x28>
 318:	01 e0       	ldi	r16, 0x01	; 1
 31a:	01 0f       	add	r16, r17
 31c:	81 2f       	mov	r24, r17
 31e:	64 df       	rcall	.-312    	; 0x1e8 <LCD_Cursor>
 320:	89 91       	ld	r24, Y+
 322:	e7 df       	rcall	.-50     	; 0x2f2 <LCD_WriteData>
 324:	10 2f       	mov	r17, r16
 326:	88 81       	ld	r24, Y
 328:	81 11       	cpse	r24, r1
 32a:	f6 cf       	rjmp	.-20     	; 0x318 <LCD_DisplayString+0x14>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	08 95       	ret

00000336 <SMTick1>:
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	ec 01       	movw	r28, r24
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	21 f0       	breq	.+8      	; 0x348 <SMTick1+0x12>
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	09 f4       	brne	.+2      	; 0x346 <SMTick1+0x10>
 344:	47 c0       	rjmp	.+142    	; 0x3d4 <SMTick1+0x9e>
 346:	58 c0       	rjmp	.+176    	; 0x3f8 <SMTick1+0xc2>
 348:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 34c:	81 11       	cpse	r24, r1
 34e:	54 c0       	rjmp	.+168    	; 0x3f8 <SMTick1+0xc2>
 350:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cursor>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	71 f4       	brne	.+28     	; 0x374 <SMTick1+0x3e>
 358:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <i>
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	d1 f4       	brne	.+52     	; 0x394 <SMTick1+0x5e>
 360:	68 e0       	ldi	r22, 0x08	; 8
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	87 e0       	ldi	r24, 0x07	; 7
 366:	ce df       	rcall	.-100    	; 0x304 <LCD_DisplayString>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <lose>
 36e:	c1 e0       	ldi	r28, 0x01	; 1
 370:	d0 e0       	ldi	r29, 0x00	; 0
 372:	42 c0       	rjmp	.+132    	; 0x3f8 <SMTick1+0xc2>
 374:	81 31       	cpi	r24, 0x11	; 17
 376:	71 f4       	brne	.+28     	; 0x394 <SMTick1+0x5e>
 378:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <j>
 37c:	81 31       	cpi	r24, 0x11	; 17
 37e:	51 f4       	brne	.+20     	; 0x394 <SMTick1+0x5e>
 380:	68 e0       	ldi	r22, 0x08	; 8
 382:	71 e0       	ldi	r23, 0x01	; 1
 384:	87 e0       	ldi	r24, 0x07	; 7
 386:	be df       	rcall	.-132    	; 0x304 <LCD_DisplayString>
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <lose>
 38e:	c1 e0       	ldi	r28, 0x01	; 1
 390:	d0 e0       	ldi	r29, 0x00	; 0
 392:	32 c0       	rjmp	.+100    	; 0x3f8 <SMTick1+0xc2>
 394:	26 df       	rcall	.-436    	; 0x1e2 <LCD_ClearScreen>
 396:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <i>
 39a:	26 df       	rcall	.-436    	; 0x1e8 <LCD_Cursor>
 39c:	83 e2       	ldi	r24, 0x23	; 35
 39e:	a9 df       	rcall	.-174    	; 0x2f2 <LCD_WriteData>
 3a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <j>
 3a4:	21 df       	rcall	.-446    	; 0x1e8 <LCD_Cursor>
 3a6:	83 e2       	ldi	r24, 0x23	; 35
 3a8:	a4 df       	rcall	.-184    	; 0x2f2 <LCD_WriteData>
 3aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i>
 3ae:	91 50       	subi	r25, 0x01	; 1
 3b0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <i>
 3b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <j>
 3b8:	81 50       	subi	r24, 0x01	; 1
 3ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <j>
 3be:	91 11       	cpse	r25, r1
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <SMTick1+0x92>
 3c2:	90 e1       	ldi	r25, 0x10	; 16
 3c4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <i>
 3c8:	80 31       	cpi	r24, 0x10	; 16
 3ca:	b1 f4       	brne	.+44     	; 0x3f8 <SMTick1+0xc2>
 3cc:	80 e2       	ldi	r24, 0x20	; 32
 3ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <j>
 3d2:	12 c0       	rjmp	.+36     	; 0x3f8 <SMTick1+0xc2>
 3d4:	30 99       	sbic	0x06, 0	; 6
 3d6:	10 c0       	rjmp	.+32     	; 0x3f8 <SMTick1+0xc2>
 3d8:	81 e1       	ldi	r24, 0x11	; 17
 3da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cursor>
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3e4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <lose>
 3e8:	89 e0       	ldi	r24, 0x09	; 9
 3ea:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <i>
 3ee:	8d e1       	ldi	r24, 0x1D	; 29
 3f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <j>
 3f4:	c0 e0       	ldi	r28, 0x00	; 0
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
 3f8:	ce 01       	movw	r24, r28
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <main>:
	return state;
}


int main()
{
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	00 d0       	rcall	.+0      	; 0x406 <main+0x6>
 406:	00 d0       	rcall	.+0      	; 0x408 <main+0x8>
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF; PORTA = 0x00;
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	81 b9       	out	0x01, r24	; 1
 410:	12 b8       	out	0x02, r1	; 2
	DDRC = 0x00; PORTC = 0xFF;
 412:	17 b8       	out	0x07, r1	; 7
 414:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF; PORTD = 0x00;
 416:	8a b9       	out	0x0a, r24	; 10
 418:	1b b8       	out	0x0b, r1	; 11
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
	unsigned long int SMTick2_period = SMTick2_calc/GCD;

	//Declare an array of tasks
	static task task1, task2;
	task *tasks[] = { &task1, &task2};
 41a:	a9 e2       	ldi	r26, 0x29	; 41
 41c:	b1 e0       	ldi	r27, 0x01	; 1
 41e:	ba 83       	std	Y+2, r27	; 0x02
 420:	a9 83       	std	Y+1, r26	; 0x01
 422:	ee e1       	ldi	r30, 0x1E	; 30
 424:	f1 e0       	ldi	r31, 0x01	; 1
 426:	fc 83       	std	Y+4, r31	; 0x04
 428:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = 0;//Task initial state.
 42a:	1c 92       	st	X, r1
	task1.period = SMTick1_period;//Task Period.
 42c:	44 e1       	ldi	r20, 0x14	; 20
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	11 96       	adiw	r26, 0x01	; 1
 436:	4d 93       	st	X+, r20
 438:	5d 93       	st	X+, r21
 43a:	6d 93       	st	X+, r22
 43c:	7c 93       	st	X, r23
 43e:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 440:	15 96       	adiw	r26, 0x05	; 5
 442:	4d 93       	st	X+, r20
 444:	5d 93       	st	X+, r21
 446:	6d 93       	st	X+, r22
 448:	7c 93       	st	X, r23
 44a:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 44c:	8b e9       	ldi	r24, 0x9B	; 155
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	1a 96       	adiw	r26, 0x0a	; 10
 452:	9c 93       	st	X, r25
 454:	8e 93       	st	-X, r24
 456:	19 97       	sbiw	r26, 0x09	; 9
	
	// Task 2
	task2.state = 0;//Task initial state.
 458:	10 82       	st	Z, r1
	task2.period = SMTick2_period;//Task Period.
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	a0 e0       	ldi	r26, 0x00	; 0
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	81 83       	std	Z+1, r24	; 0x01
 464:	92 83       	std	Z+2, r25	; 0x02
 466:	a3 83       	std	Z+3, r26	; 0x03
 468:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 46a:	85 83       	std	Z+5, r24	; 0x05
 46c:	96 83       	std	Z+6, r25	; 0x06
 46e:	a7 83       	std	Z+7, r26	; 0x07
 470:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &SMTick2;//Function pointer for the tick.
 472:	8c ef       	ldi	r24, 0xFC	; 252
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	92 87       	std	Z+10, r25	; 0x0a
 478:	81 87       	std	Z+9, r24	; 0x09

	// Set the timer and turn it on
	TimerSet(GCD);
 47a:	6a e0       	ldi	r22, 0x0A	; 10
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	82 de       	rcall	.-764    	; 0x188 <TimerSet>
	TimerOn();
 484:	21 de       	rcall	.-958    	; 0xc8 <TimerOn>
	
	LCD_init();
 486:	26 df       	rcall	.-436    	; 0x2d4 <LCD_init>
	
	LCD_Cursor(i);
 488:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <i>
 48c:	ad de       	rcall	.-678    	; 0x1e8 <LCD_Cursor>
	LCD_WriteData('#');
 48e:	83 e2       	ldi	r24, 0x23	; 35
 490:	30 df       	rcall	.-416    	; 0x2f2 <LCD_WriteData>
	LCD_Cursor(j);
 492:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <j>
 496:	a8 de       	rcall	.-688    	; 0x1e8 <LCD_Cursor>
 498:	83 e2       	ldi	r24, 0x23	; 35
	LCD_WriteData('#');
 49a:	2b df       	rcall	.-426    	; 0x2f2 <LCD_WriteData>
 49c:	7e 01       	movw	r14, r28
 49e:	85 e0       	ldi	r24, 0x05	; 5
 4a0:	e8 0e       	add	r14, r24
 4a2:	f1 1c       	adc	r15, r1
 4a4:	de 01       	movw	r26, r28
 4a6:	11 96       	adiw	r26, 0x01	; 1
 4a8:	6d 01       	movw	r12, r26
 4aa:	f6 01       	movw	r30, r12
 4ac:	01 91       	ld	r16, Z+
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime >= tasks[i]->period ) {
 4ae:	11 91       	ld	r17, Z+
 4b0:	6f 01       	movw	r12, r30
 4b2:	d8 01       	movw	r26, r16
 4b4:	15 96       	adiw	r26, 0x05	; 5
 4b6:	4d 91       	ld	r20, X+
 4b8:	5d 91       	ld	r21, X+
 4ba:	6d 91       	ld	r22, X+
 4bc:	7c 91       	ld	r23, X
 4be:	18 97       	sbiw	r26, 0x08	; 8
 4c0:	11 96       	adiw	r26, 0x01	; 1
 4c2:	8d 91       	ld	r24, X+
 4c4:	9d 91       	ld	r25, X+
 4c6:	0d 90       	ld	r0, X+
 4c8:	bc 91       	ld	r27, X
 4ca:	a0 2d       	mov	r26, r0
 4cc:	48 17       	cp	r20, r24
 4ce:	59 07       	cpc	r21, r25
 4d0:	6a 07       	cpc	r22, r26
 4d2:	7b 07       	cpc	r23, r27
 4d4:	80 f0       	brcs	.+32     	; 0x4f6 <main+0xf6>
 4d6:	f8 01       	movw	r30, r16
 4d8:	80 81       	ld	r24, Z
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 4da:	01 84       	ldd	r0, Z+9	; 0x09
 4dc:	f2 85       	ldd	r31, Z+10	; 0x0a
 4de:	e0 2d       	mov	r30, r0
 4e0:	08 2e       	mov	r0, r24
 4e2:	00 0c       	add	r0, r0
 4e4:	99 0b       	sbc	r25, r25
 4e6:	09 95       	icall
 4e8:	d8 01       	movw	r26, r16
 4ea:	8c 93       	st	X, r24
 4ec:	f8 01       	movw	r30, r16
 4ee:	15 82       	std	Z+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 4f0:	16 82       	std	Z+6, r1	; 0x06
 4f2:	17 82       	std	Z+7, r1	; 0x07
 4f4:	10 86       	std	Z+8, r1	; 0x08
 4f6:	f8 01       	movw	r30, r16
 4f8:	85 81       	ldd	r24, Z+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 4fa:	96 81       	ldd	r25, Z+6	; 0x06
 4fc:	a7 81       	ldd	r26, Z+7	; 0x07
 4fe:	b0 85       	ldd	r27, Z+8	; 0x08
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	a1 1d       	adc	r26, r1
 504:	b1 1d       	adc	r27, r1
 506:	85 83       	std	Z+5, r24	; 0x05
 508:	96 83       	std	Z+6, r25	; 0x06
 50a:	a7 83       	std	Z+7, r26	; 0x07
 50c:	b0 87       	std	Z+8, r27	; 0x08
 50e:	ce 14       	cp	r12, r14
 510:	df 04       	cpc	r13, r15
	LCD_WriteData('#');
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 512:	59 f6       	brne	.-106    	; 0x4aa <main+0xaa>
 514:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <TimerFlag>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 518:	88 23       	and	r24, r24
 51a:	e1 f3       	breq	.-8      	; 0x514 <main+0x114>
 51c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <TimerFlag>
		TimerFlag = 0;
 520:	c1 cf       	rjmp	.-126    	; 0x4a4 <main+0xa4>

00000522 <_exit>:
 522:	f8 94       	cli

00000524 <__stop_program>:
	}
 524:	ff cf       	rjmp	.-2      	; 0x524 <__stop_program>
