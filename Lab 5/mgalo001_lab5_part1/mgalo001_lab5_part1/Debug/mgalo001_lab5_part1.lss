
mgalo001_lab5_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000839  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078e  00000000  00000000  00000a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000291  00000000  00000000  000011a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f8  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2d c0       	rjmp	.+90     	; 0xf6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
// Library Headers
#include <avr/io.h>

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure Port A's 8 Pins as Inputs, Initialize to 1s
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Configure Port C's 8 Pins as Outputs, Initialize to 0s
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	15 b8       	out	0x05, r1	; 5
	{
		// Read Input
		tempA = ~PINA & 0x0F;
		
		// Set tempB to 0
		tempB = 0x00;
  a8:	30 e0       	ldi	r19, 0x00	; 0
		
		if(tempA == 1 || tempA == 2) {
			tempB = 0x60;
  aa:	50 e6       	ldi	r21, 0x60	; 96
		}
		if(tempA == 3 || tempA == 4) {
			tempB = 0x70;
  ac:	40 e7       	ldi	r20, 0x70	; 112
	
	// Start Execution Here
	while (1)
	{
		// Read Input
		tempA = ~PINA & 0x0F;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	80 95       	com	r24
  b2:	8f 70       	andi	r24, 0x0F	; 15
		
		// Set tempB to 0
		tempB = 0x00;
		
		if(tempA == 1 || tempA == 2) {
  b4:	9f ef       	ldi	r25, 0xFF	; 255
  b6:	98 0f       	add	r25, r24
  b8:	92 30       	cpi	r25, 0x02	; 2
  ba:	10 f4       	brcc	.+4      	; 0xc0 <main+0x22>
			tempB = 0x60;
  bc:	95 2f       	mov	r25, r21
  be:	01 c0       	rjmp	.+2      	; 0xc2 <main+0x24>
	{
		// Read Input
		tempA = ~PINA & 0x0F;
		
		// Set tempB to 0
		tempB = 0x00;
  c0:	93 2f       	mov	r25, r19
		
		if(tempA == 1 || tempA == 2) {
			tempB = 0x60;
		}
		if(tempA == 3 || tempA == 4) {
  c2:	2d ef       	ldi	r18, 0xFD	; 253
  c4:	28 0f       	add	r18, r24
  c6:	22 30       	cpi	r18, 0x02	; 2
  c8:	08 f4       	brcc	.+2      	; 0xcc <main+0x2e>
			tempB = 0x70;
  ca:	94 2f       	mov	r25, r20
		}
		if(tempA == 5 || tempA == 6) {
  cc:	2b ef       	ldi	r18, 0xFB	; 251
  ce:	28 0f       	add	r18, r24
  d0:	22 30       	cpi	r18, 0x02	; 2
  d2:	08 f4       	brcc	.+2      	; 0xd6 <main+0x38>
			tempB = 0x38;
  d4:	98 e3       	ldi	r25, 0x38	; 56
		}
		if(tempA >= 7 && tempA <= 9) {
  d6:	29 ef       	ldi	r18, 0xF9	; 249
  d8:	28 0f       	add	r18, r24
  da:	23 30       	cpi	r18, 0x03	; 3
  dc:	08 f4       	brcc	.+2      	; 0xe0 <main+0x42>
			tempB = 0x3C;
  de:	9c e3       	ldi	r25, 0x3C	; 60
		}
		if(tempA >= 10 && tempA <= 12) {
  e0:	26 ef       	ldi	r18, 0xF6	; 246
  e2:	28 0f       	add	r18, r24
  e4:	23 30       	cpi	r18, 0x03	; 3
  e6:	08 f4       	brcc	.+2      	; 0xea <main+0x4c>
			tempB = 0x3E;
  e8:	9e e3       	ldi	r25, 0x3E	; 62
		}
		if(tempA >= 13 && tempA <= 15) {
  ea:	8d 50       	subi	r24, 0x0D	; 13
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	08 f4       	brcc	.+2      	; 0xf2 <main+0x54>
			tempB = 0x3F;
  f0:	9f e3       	ldi	r25, 0x3F	; 63
		}
		// Write Output on Port C
		PORTB = tempB;
  f2:	95 b9       	out	0x05, r25	; 5
	}
  f4:	dc cf       	rjmp	.-72     	; 0xae <main+0x10>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
