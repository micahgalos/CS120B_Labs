
mgalo001_lab5_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000158  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091b  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000853  00000000  00000000  00000bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b6  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000026  00000000  00000000  00001b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	39 d0       	rcall	.+114    	; 0x136 <main>
  c4:	47 c0       	rjmp	.+142    	; 0x154 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Run_Pattern>:
unsigned char button = 0x00;
unsigned char i = 0x00;

void Run_Pattern(unsigned char pattern[], unsigned char length)
{
	if(i == length)
  c8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
  cc:	26 13       	cpse	r18, r22
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <Run_Pattern+0xc>
	i = 0x00;
  d0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	PORTB = pattern[i];
  d4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
  d8:	fc 01       	movw	r30, r24
  da:	e2 0f       	add	r30, r18
  dc:	f1 1d       	adc	r31, r1
  de:	80 81       	ld	r24, Z
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	08 95       	ret

000000e4 <Tick>:
}

void Tick()
{
	switch(state)
  e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <state>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	41 f0       	breq	.+16     	; 0xfc <Tick+0x18>
  ec:	18 f0       	brcs	.+6      	; 0xf4 <Tick+0x10>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	69 f0       	breq	.+26     	; 0x10c <Tick+0x28>
  f2:	19 c0       	rjmp	.+50     	; 0x126 <Tick+0x42>
	{
		case Start:
		state = S1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
		break;
  fa:	18 c0       	rjmp	.+48     	; 0x12c <Tick+0x48>
		
		case S1:
		if(button)
  fc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button>
 100:	88 23       	and	r24, r24
 102:	a1 f0       	breq	.+40     	; 0x12c <Tick+0x48>
		{
			state = wait;
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
 10a:	08 95       	ret
		}
		break;
		
		case wait:
		if(!button)
 10c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button>
 110:	81 11       	cpse	r24, r1
 112:	10 c0       	rjmp	.+32     	; 0x134 <Tick+0x50>
		{
			++i;
 114:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			state = S1;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
 124:	03 c0       	rjmp	.+6      	; 0x12c <Tick+0x48>
		}
		break;
		
		default:
		state = Start;
 126:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <state>
		break;
 12a:	08 95       	ret
	{
		case Start:
		break;
		
		case S1:
		Run_Pattern(pattern1, 4);
 12c:	64 e0       	ldi	r22, 0x04	; 4
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	ca cf       	rjmp	.-108    	; 0xc8 <Run_Pattern>
 134:	08 95       	ret

00000136 <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 Pins as Inputs, Initialize to 1s
 136:	11 b8       	out	0x01, r1	; 1
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 Pins as Outputs, Initialize to 0s
 13c:	84 b9       	out	0x04, r24	; 4
 13e:	15 b8       	out	0x05, r1	; 5
	
	state = Start;
 140:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <state>
	
	while (1)
	{
		button = ~PINA & 0x01;
 144:	c1 e0       	ldi	r28, 0x01	; 1
 146:	80 b1       	in	r24, 0x00	; 0
 148:	8c 27       	eor	r24, r28
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button>
		Tick();
 150:	c9 df       	rcall	.-110    	; 0xe4 <Tick>
 152:	f9 cf       	rjmp	.-14     	; 0x146 <main+0x10>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
