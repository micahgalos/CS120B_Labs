
mgalo001_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a8  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000346  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001afd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	5c c0       	rjmp	.+184    	; 0xbe <__bad_interrupt>
   6:	00 00       	nop
   8:	5a c0       	rjmp	.+180    	; 0xbe <__bad_interrupt>
   a:	00 00       	nop
   c:	58 c0       	rjmp	.+176    	; 0xbe <__bad_interrupt>
   e:	00 00       	nop
  10:	56 c0       	rjmp	.+172    	; 0xbe <__bad_interrupt>
  12:	00 00       	nop
  14:	54 c0       	rjmp	.+168    	; 0xbe <__bad_interrupt>
  16:	00 00       	nop
  18:	52 c0       	rjmp	.+164    	; 0xbe <__bad_interrupt>
  1a:	00 00       	nop
  1c:	50 c0       	rjmp	.+160    	; 0xbe <__bad_interrupt>
  1e:	00 00       	nop
  20:	4e c0       	rjmp	.+156    	; 0xbe <__bad_interrupt>
  22:	00 00       	nop
  24:	4c c0       	rjmp	.+152    	; 0xbe <__bad_interrupt>
  26:	00 00       	nop
  28:	4a c0       	rjmp	.+148    	; 0xbe <__bad_interrupt>
  2a:	00 00       	nop
  2c:	48 c0       	rjmp	.+144    	; 0xbe <__bad_interrupt>
  2e:	00 00       	nop
  30:	46 c0       	rjmp	.+140    	; 0xbe <__bad_interrupt>
  32:	00 00       	nop
  34:	44 c0       	rjmp	.+136    	; 0xbe <__bad_interrupt>
  36:	00 00       	nop
  38:	42 c0       	rjmp	.+132    	; 0xbe <__bad_interrupt>
  3a:	00 00       	nop
  3c:	40 c0       	rjmp	.+128    	; 0xbe <__bad_interrupt>
  3e:	00 00       	nop
  40:	3e c0       	rjmp	.+124    	; 0xbe <__bad_interrupt>
  42:	00 00       	nop
  44:	3c c0       	rjmp	.+120    	; 0xbe <__bad_interrupt>
  46:	00 00       	nop
  48:	3a c0       	rjmp	.+116    	; 0xbe <__bad_interrupt>
  4a:	00 00       	nop
  4c:	38 c0       	rjmp	.+112    	; 0xbe <__bad_interrupt>
  4e:	00 00       	nop
  50:	36 c0       	rjmp	.+108    	; 0xbe <__bad_interrupt>
  52:	00 00       	nop
  54:	34 c0       	rjmp	.+104    	; 0xbe <__bad_interrupt>
  56:	00 00       	nop
  58:	32 c0       	rjmp	.+100    	; 0xbe <__bad_interrupt>
  5a:	00 00       	nop
  5c:	30 c0       	rjmp	.+96     	; 0xbe <__bad_interrupt>
  5e:	00 00       	nop
  60:	2e c0       	rjmp	.+92     	; 0xbe <__bad_interrupt>
  62:	00 00       	nop
  64:	2c c0       	rjmp	.+88     	; 0xbe <__bad_interrupt>
  66:	00 00       	nop
  68:	2a c0       	rjmp	.+84     	; 0xbe <__bad_interrupt>
  6a:	00 00       	nop
  6c:	28 c0       	rjmp	.+80     	; 0xbe <__bad_interrupt>
  6e:	00 00       	nop
  70:	26 c0       	rjmp	.+76     	; 0xbe <__bad_interrupt>
  72:	00 00       	nop
  74:	24 c0       	rjmp	.+72     	; 0xbe <__bad_interrupt>
  76:	00 00       	nop
  78:	22 c0       	rjmp	.+68     	; 0xbe <__bad_interrupt>
  7a:	00 00       	nop
  7c:	20 c0       	rjmp	.+64     	; 0xbe <__bad_interrupt>
  7e:	00 00       	nop
  80:	1e c0       	rjmp	.+60     	; 0xbe <__bad_interrupt>
  82:	00 00       	nop
  84:	1c c0       	rjmp	.+56     	; 0xbe <__bad_interrupt>
  86:	00 00       	nop
  88:	1a c0       	rjmp	.+52     	; 0xbe <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6c 00       	.word	0x006c	; ????
  8e:	70 00       	.word	0x0070	; ????
  90:	84 00       	.word	0x0084	; ????
  92:	94 00       	.word	0x0094	; ????
  94:	98 00       	.word	0x0098	; ????
  96:	a8 00       	.word	0x00a8	; ????
  98:	ac 00       	.word	0x00ac	; ????
  9a:	b6 00       	.word	0x00b6	; ????
  9c:	ba 00       	.word	0x00ba	; ????

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	a2 30       	cpi	r26, 0x02	; 2
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	6f d0       	rcall	.+222    	; 0x19a <main>
  bc:	85 c0       	rjmp	.+266    	; 0x1c8 <_exit>

000000be <__bad_interrupt>:
  be:	a0 cf       	rjmp	.-192    	; 0x0 <__vectors>

000000c0 <Tick>:

unsigned char tempB = 0x00;

void Tick()
{
	switch(state)
  c0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <state>
  c4:	8e 2f       	mov	r24, r30
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	89 30       	cpi	r24, 0x09	; 9
  ca:	91 05       	cpc	r25, r1
  cc:	08 f0       	brcs	.+2      	; 0xd0 <Tick+0x10>
  ce:	5a c0       	rjmp	.+180    	; 0x184 <Tick+0xc4>
  d0:	fc 01       	movw	r30, r24
  d2:	ea 5b       	subi	r30, 0xBA	; 186
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	6f c0       	rjmp	.+222    	; 0x1b6 <__tablejump2__>
	{
		case Start:
		state = Init;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		break;
  de:	08 95       	ret
		
		case Init:
		if(A0){
  e0:	00 99       	sbic	0x00, 0	; 0
  e2:	04 c0       	rjmp	.+8      	; 0xec <Tick+0x2c>
		state = wait1;
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
  ea:	08 95       	ret
		}
		else if(A1){
  ec:	01 99       	sbic	0x00, 1	; 0
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <Tick+0x38>
		state = wait2;
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
  f6:	08 95       	ret
		}
		else if(A0 && A1){
  f8:	00 99       	sbic	0x00, 0	; 0
  fa:	4e c0       	rjmp	.+156    	; 0x198 <Tick+0xd8>
  fc:	01 99       	sbic	0x00, 1	; 0
  fe:	4c c0       	rjmp	.+152    	; 0x198 <Tick+0xd8>
		state = wait3;
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 106:	08 95       	ret
		state = Init;
		}
		break;
		
		case wait1:
		if(!A0)
 108:	00 9b       	sbis	0x00, 0	; 0
 10a:	08 c0       	rjmp	.+16     	; 0x11c <Tick+0x5c>
		{
			state = Inc;
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		
		case wait1:
		break;
		
		case Inc:
		if(tempB < 9){
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	89 30       	cpi	r24, 0x09	; 9
 118:	c0 f1       	brcs	.+112    	; 0x18a <Tick+0xca>
 11a:	08 95       	ret
		case wait1:
		if(!A0)
		{
			state = Inc;
		}
		else if(A1){
 11c:	01 99       	sbic	0x00, 1	; 0
 11e:	3c c0       	rjmp	.+120    	; 0x198 <Tick+0xd8>
		state = wait3;
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 126:	08 95       	ret
		}
		break;
		
		case Inc:
		state = Init;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		break;
 12e:	08 95       	ret
		
		case wait2:
		if(!A1){
 130:	01 9b       	sbis	0x00, 1	; 0
 132:	08 c0       	rjmp	.+16     	; 0x144 <Tick+0x84>
		state = Dec;
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		
		case wait2:
		break;
		
		case Dec:
		if(tempB > 0){
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13e:	81 11       	cpse	r24, r1
 140:	28 c0       	rjmp	.+80     	; 0x192 <Tick+0xd2>
 142:	08 95       	ret
		
		case wait2:
		if(!A1){
		state = Dec;
		}
		else if(A0){
 144:	00 99       	sbic	0x00, 0	; 0
 146:	28 c0       	rjmp	.+80     	; 0x198 <Tick+0xd8>
		state = wait3;
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 14e:	08 95       	ret
		}
		break;
		
		case Dec:
		state = Init;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		break;
 156:	08 95       	ret
		
		case wait3:
		if(!A0 || !A1){
 158:	00 99       	sbic	0x00, 0	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <Tick+0xa0>
 15c:	01 9b       	sbis	0x00, 1	; 0
 15e:	1c c0       	rjmp	.+56     	; 0x198 <Tick+0xd8>
		state = Reset;
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		
		case wait3:
		break;
		
		case Reset:
		tempB = 0x00;
 166:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		break;
 16a:	08 95       	ret
		state = Reset;
		}
		break;
		
		case Reset:
		state = wait4;
 16c:	88 e0       	ldi	r24, 0x08	; 8
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		break;
 172:	08 95       	ret
		
		case wait4:
		if(!A0 && !A1){
 174:	00 9b       	sbis	0x00, 0	; 0
 176:	10 c0       	rjmp	.+32     	; 0x198 <Tick+0xd8>
 178:	01 9b       	sbis	0x00, 1	; 0
 17a:	0e c0       	rjmp	.+28     	; 0x198 <Tick+0xd8>
		state = Init;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 182:	08 95       	ret
		}
		break;
		
		default:
		state = Start;
 184:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
		break;
 188:	08 95       	ret
		case wait1:
		break;
		
		case Inc:
		if(tempB < 9){
		++tempB;
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 190:	08 95       	ret
		case wait2:
		break;
		
		case Dec:
		if(tempB > 0){
		--tempB;
 192:	81 50       	subi	r24, 0x01	; 1
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 198:	08 95       	ret

0000019a <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure Port A's 8 Pins as Inputs, Initialize to 1s
 19a:	11 b8       	out	0x01, r1	; 1
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Configure Port B's 8 Pins as Outputs, Initialize to 0s
 1a0:	84 b9       	out	0x04, r24	; 4
 1a2:	15 b8       	out	0x05, r1	; 5
	
	tempB = 0x00;
 1a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	state = Start;
 1a8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
	
	while (1)
	{
		Tick();
 1ac:	89 df       	rcall	.-238    	; 0xc0 <Tick>
		PORTB = tempB;
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	fb cf       	rjmp	.-10     	; 0x1ac <main+0x12>

000001b6 <__tablejump2__>:
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	00 24       	eor	r0, r0
 1bc:	00 1c       	adc	r0, r0
 1be:	0b be       	out	0x3b, r0	; 59
 1c0:	07 90       	elpm	r0, Z+
 1c2:	f6 91       	elpm	r31, Z
 1c4:	e0 2d       	mov	r30, r0
 1c6:	09 94       	ijmp

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
