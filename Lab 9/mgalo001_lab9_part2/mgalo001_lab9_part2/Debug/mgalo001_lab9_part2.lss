
mgalo001_lab9_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000608  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800120  00800120  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b5  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  00001121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ea  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000480  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008d  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000022f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
  36:	00 00       	nop
  38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
  76:	00 00       	nop
  78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f4 00       	.word	0x00f4	; ????
  8e:	0e 01       	movw	r0, r28
  90:	05 01       	movw	r0, r10
  92:	fd 00       	.word	0x00fd	; ????
  94:	12 01       	movw	r2, r4
  96:	26 01       	movw	r4, r12
  98:	2a 01       	movw	r4, r20
  9a:	33 01       	movw	r6, r6
  9c:	37 01       	movw	r6, r14

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	e8 e0       	ldi	r30, 0x08	; 8
  b2:	f6 e0       	ldi	r31, 0x06	; 6
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a0 32       	cpi	r26, 0x20	; 32
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a0 e2       	ldi	r26, 0x20	; 32
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a7 32       	cpi	r26, 0x27	; 39
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	06 d1       	rcall	.+524    	; 0x2e2 <main>
  d6:	96 c2       	rjmp	.+1324   	; 0x604 <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <set_PWM>:
// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	6b 01       	movw	r12, r22
  e4:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
  e6:	9b 01       	movw	r18, r22
  e8:	ac 01       	movw	r20, r24
  ea:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
  ee:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <__data_end+0x1>
  f2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end+0x2>
  f6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x3>
  fa:	02 d1       	rcall	.+516    	; 0x300 <__cmpsf2>
  fc:	88 23       	and	r24, r24
  fe:	09 f4       	brne	.+2      	; 0x102 <set_PWM+0x28>
 100:	52 c0       	rjmp	.+164    	; 0x1a6 <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	a9 01       	movw	r20, r18
 108:	c7 01       	movw	r24, r14
 10a:	b6 01       	movw	r22, r12
 10c:	f9 d0       	rcall	.+498    	; 0x300 <__cmpsf2>
 10e:	81 11       	cpse	r24, r1
 110:	06 c0       	rjmp	.+12     	; 0x11e <set_PWM+0x44>
 112:	e1 e9       	ldi	r30, 0x91	; 145
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 70       	andi	r24, 0x08	; 8
 11a:	80 83       	st	Z, r24
 11c:	05 c0       	rjmp	.+10     	; 0x128 <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
 11e:	e1 e9       	ldi	r30, 0x91	; 145
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	83 60       	ori	r24, 0x03	; 3
 126:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
 128:	28 e5       	ldi	r18, 0x58	; 88
 12a:	39 e3       	ldi	r19, 0x39	; 57
 12c:	44 e7       	ldi	r20, 0x74	; 116
 12e:	5f e3       	ldi	r21, 0x3F	; 63
 130:	c7 01       	movw	r24, r14
 132:	b6 01       	movw	r22, r12
 134:	e5 d0       	rcall	.+458    	; 0x300 <__cmpsf2>
 136:	88 23       	and	r24, r24
 138:	3c f4       	brge	.+14     	; 0x148 <set_PWM+0x6e>
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	9f ef       	ldi	r25, 0xFF	; 255
 13e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 142:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 146:	23 c0       	rjmp	.+70     	; 0x18e <set_PWM+0xb4>
		
		// prevents OCR0A from underflowing, using prescaler 64					
		// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	34 e2       	ldi	r19, 0x24	; 36
 14c:	44 ef       	ldi	r20, 0xF4	; 244
 14e:	56 e4       	ldi	r21, 0x46	; 70
 150:	c7 01       	movw	r24, r14
 152:	b6 01       	movw	r22, r12
 154:	e7 d1       	rcall	.+974    	; 0x524 <__gesf2>
 156:	18 16       	cp	r1, r24
 158:	2c f4       	brge	.+10     	; 0x164 <set_PWM+0x8a>
 15a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 15e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 162:	15 c0       	rjmp	.+42     	; 0x18e <set_PWM+0xb4>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	53 e4       	ldi	r21, 0x43	; 67
 16c:	c7 01       	movw	r24, r14
 16e:	b6 01       	movw	r22, r12
 170:	dd d1       	rcall	.+954    	; 0x52c <__mulsf3>
 172:	9b 01       	movw	r18, r22
 174:	ac 01       	movw	r20, r24
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	74 e2       	ldi	r23, 0x24	; 36
 17a:	84 ef       	ldi	r24, 0xF4	; 244
 17c:	9a e4       	ldi	r25, 0x4A	; 74
 17e:	c4 d0       	rcall	.+392    	; 0x308 <__divsf3>
 180:	2b d1       	rcall	.+598    	; 0x3d8 <__fixsfsi>
 182:	61 50       	subi	r22, 0x01	; 1
 184:	71 09       	sbc	r23, r1
 186:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 18a:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		TCNT3 = 0; // resets counter
 18e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 192:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
 196:	c0 92 20 01 	sts	0x0120, r12	; 0x800120 <__data_end>
 19a:	d0 92 21 01 	sts	0x0121, r13	; 0x800121 <__data_end+0x1>
 19e:	e0 92 22 01 	sts	0x0122, r14	; 0x800122 <__data_end+0x2>
 1a2:	f0 92 23 01 	sts	0x0123, r15	; 0x800123 <__data_end+0x3>
	}
}
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	08 95       	ret

000001b0 <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
 1b0:	80 e4       	ldi	r24, 0x40	; 64
 1b2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 1b6:	8b e0       	ldi	r24, 0x0B	; 11
 1b8:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	cb 01       	movw	r24, r22
 1c2:	8b cf       	rjmp	.-234    	; 0xda <set_PWM>
 1c4:	08 95       	ret

000001c6 <PWM_off>:
}

void PWM_off() {
	TCCR3A = 0x00;
 1c6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
 1ca:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 1ce:	08 95       	ret

000001d0 <Tick>:

unsigned char i = 0x00;

void Tick(){

	switch(state){ // State Transitions
 1d0:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <state>
 1d4:	82 2f       	mov	r24, r18
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	89 30       	cpi	r24, 0x09	; 9
 1da:	91 05       	cpc	r25, r1
 1dc:	08 f0       	brcs	.+2      	; 0x1e0 <Tick+0x10>
 1de:	4f c0       	rjmp	.+158    	; 0x27e <Tick+0xae>
 1e0:	fc 01       	movw	r30, r24
 1e2:	ea 5b       	subi	r30, 0xBA	; 186
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	05 c2       	rjmp	.+1034   	; 0x5f2 <__tablejump2__>
		case off:
		if(button == 0x01){
 1e8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <button>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <Tick+0x22>
 1f0:	53 c0       	rjmp	.+166    	; 0x298 <Tick+0xc8>
			state = turnOn;
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
 1f8:	08 95       	ret
			state = off;
		}
		break;

		case turnOff:
		if(button == 0x01){
 1fa:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <button>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	09 f4       	brne	.+2      	; 0x204 <Tick+0x34>
 202:	6e c0       	rjmp	.+220    	; 0x2e0 <Tick+0x110>
			state = turnOff;
		}
		else{
			state = off;
 204:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <state>
 208:	47 c0       	rjmp	.+142    	; 0x298 <Tick+0xc8>
		}
		break;

		case turnOn:
		if(button == 0x01){
 20a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <button>
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	09 f4       	brne	.+2      	; 0x214 <Tick+0x44>
 212:	66 c0       	rjmp	.+204    	; 0x2e0 <Tick+0x110>
			state = turnOn;
		}
		else{
			state = on;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
 21a:	40 c0       	rjmp	.+128    	; 0x29c <Tick+0xcc>
		}
		break;
		case on:
		state = playNote;
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
		break;
 222:	40 c0       	rjmp	.+128    	; 0x2a4 <Tick+0xd4>

		case playNote:
		if(button == 0x01){
 224:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <button>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	21 f4       	brne	.+8      	; 0x234 <Tick+0x64>
			state = turnOff;
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
 232:	08 95       	ret
		}
		else if(button == 0x02){
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	21 f4       	brne	.+8      	; 0x240 <Tick+0x70>
			state = waitUp;
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
 23e:	08 95       	ret
		}
		else if(button == 0x04){
 240:	84 30       	cpi	r24, 0x04	; 4
 242:	81 f5       	brne	.+96     	; 0x2a4 <Tick+0xd4>
			state = waitDown;
 244:	88 e0       	ldi	r24, 0x08	; 8
 246:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
 24a:	08 95       	ret
			state = playNote;
		}
		break;

		case up:
		state = playNote;
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
		break;
 252:	28 c0       	rjmp	.+80     	; 0x2a4 <Tick+0xd4>

		case waitUp:
		if(button == 0x02){
 254:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <button>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	09 f4       	brne	.+2      	; 0x25e <Tick+0x8e>
 25c:	41 c0       	rjmp	.+130    	; 0x2e0 <Tick+0x110>
			state = waitUp;
		}
		else{
			state = up;
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
 264:	2e c0       	rjmp	.+92     	; 0x2c2 <Tick+0xf2>
		}
		break;

		case down:
		state = playNote;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
		break;
 26c:	1b c0       	rjmp	.+54     	; 0x2a4 <Tick+0xd4>

		case waitDown:
		if(button == 0x04){
 26e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <button>
 272:	84 30       	cpi	r24, 0x04	; 4
 274:	a9 f1       	breq	.+106    	; 0x2e0 <Tick+0x110>
			state = waitDown;
		}
		else{
			state = down;
 276:	87 e0       	ldi	r24, 0x07	; 7
 278:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
 27c:	2a c0       	rjmp	.+84     	; 0x2d2 <Tick+0x102>

		default:
		break;
	}
	
	switch(state){ // State Actions
 27e:	24 30       	cpi	r18, 0x04	; 4
 280:	89 f0       	breq	.+34     	; 0x2a4 <Tick+0xd4>
 282:	28 f4       	brcc	.+10     	; 0x28e <Tick+0xbe>
 284:	22 23       	and	r18, r18
 286:	41 f0       	breq	.+16     	; 0x298 <Tick+0xc8>
 288:	21 30       	cpi	r18, 0x01	; 1
 28a:	41 f0       	breq	.+16     	; 0x29c <Tick+0xcc>
 28c:	08 95       	ret
 28e:	25 30       	cpi	r18, 0x05	; 5
 290:	c1 f0       	breq	.+48     	; 0x2c2 <Tick+0xf2>
 292:	27 30       	cpi	r18, 0x07	; 7
 294:	f1 f0       	breq	.+60     	; 0x2d2 <Tick+0x102>
		case off:
		PWM_off();
 296:	08 95       	ret
		break;
 298:	96 cf       	rjmp	.-212    	; 0x1c6 <PWM_off>
		
		case turnOff:
		break;
		
		case on:
		PWM_on();
 29a:	08 95       	ret
 29c:	89 df       	rcall	.-238    	; 0x1b0 <PWM_on>
		i = 0x00;
 29e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <i>
		break;
 2a2:	08 95       	ret

		case playNote:
		set_PWM(notes[i]);
 2a4:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <i>
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	ee 0f       	add	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	e0 50       	subi	r30, 0x00	; 0
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	60 81       	ld	r22, Z
 2b8:	71 81       	ldd	r23, Z+1	; 0x01
 2ba:	82 81       	ldd	r24, Z+2	; 0x02
 2bc:	93 81       	ldd	r25, Z+3	; 0x03
 2be:	0d cf       	rjmp	.-486    	; 0xda <set_PWM>
		break;
 2c0:	08 95       	ret

		case up:
		if(i < 7){
 2c2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <i>
 2c6:	87 30       	cpi	r24, 0x07	; 7
 2c8:	58 f4       	brcc	.+22     	; 0x2e0 <Tick+0x110>
			++i;
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <i>
 2d0:	08 95       	ret

		case waitUp:
		break;
		
		case down:
		if(i > 0){
 2d2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <i>
 2d6:	88 23       	and	r24, r24
 2d8:	19 f0       	breq	.+6      	; 0x2e0 <Tick+0x110>
			--i;
 2da:	81 50       	subi	r24, 0x01	; 1
 2dc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <i>
 2e0:	08 95       	ret

000002e2 <main>:
}


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs, initialize to 1s
 2e2:	11 b8       	out	0x01, r1	; 1
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs, initialize to 0s
 2e8:	84 b9       	out	0x04, r24	; 4
 2ea:	15 b8       	out	0x05, r1	; 5
	
	PWM_on();
 2ec:	61 df       	rcall	.-318    	; 0x1b0 <PWM_on>
	
	state = off;
 2ee:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <state>
	
	// Start Execution Here
	while(1){
		button = ~PINA & 0x07;
 2f2:	80 b1       	in	r24, 0x00	; 0
 2f4:	80 95       	com	r24
 2f6:	87 70       	andi	r24, 0x07	; 7
 2f8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <button>
		Tick();
 2fc:	69 df       	rcall	.-302    	; 0x1d0 <Tick>
 2fe:	f9 cf       	rjmp	.-14     	; 0x2f2 <main+0x10>

00000300 <__cmpsf2>:
 300:	9c d0       	rcall	.+312    	; 0x43a <__fp_cmp>
 302:	08 f4       	brcc	.+2      	; 0x306 <__cmpsf2+0x6>
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	08 95       	ret

00000308 <__divsf3>:
 308:	0c d0       	rcall	.+24     	; 0x322 <__divsf3x>
 30a:	d2 c0       	rjmp	.+420    	; 0x4b0 <__fp_round>
 30c:	ca d0       	rcall	.+404    	; 0x4a2 <__fp_pscB>
 30e:	40 f0       	brcs	.+16     	; 0x320 <__divsf3+0x18>
 310:	c1 d0       	rcall	.+386    	; 0x494 <__fp_pscA>
 312:	30 f0       	brcs	.+12     	; 0x320 <__divsf3+0x18>
 314:	21 f4       	brne	.+8      	; 0x31e <__divsf3+0x16>
 316:	5f 3f       	cpi	r21, 0xFF	; 255
 318:	19 f0       	breq	.+6      	; 0x320 <__divsf3+0x18>
 31a:	b3 c0       	rjmp	.+358    	; 0x482 <__fp_inf>
 31c:	51 11       	cpse	r21, r1
 31e:	fc c0       	rjmp	.+504    	; 0x518 <__fp_szero>
 320:	b6 c0       	rjmp	.+364    	; 0x48e <__fp_nan>

00000322 <__divsf3x>:
 322:	d7 d0       	rcall	.+430    	; 0x4d2 <__fp_split3>
 324:	98 f3       	brcs	.-26     	; 0x30c <__divsf3+0x4>

00000326 <__divsf3_pse>:
 326:	99 23       	and	r25, r25
 328:	c9 f3       	breq	.-14     	; 0x31c <__divsf3+0x14>
 32a:	55 23       	and	r21, r21
 32c:	b1 f3       	breq	.-20     	; 0x31a <__divsf3+0x12>
 32e:	95 1b       	sub	r25, r21
 330:	55 0b       	sbc	r21, r21
 332:	bb 27       	eor	r27, r27
 334:	aa 27       	eor	r26, r26
 336:	62 17       	cp	r22, r18
 338:	73 07       	cpc	r23, r19
 33a:	84 07       	cpc	r24, r20
 33c:	38 f0       	brcs	.+14     	; 0x34c <__divsf3_pse+0x26>
 33e:	9f 5f       	subi	r25, 0xFF	; 255
 340:	5f 4f       	sbci	r21, 0xFF	; 255
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	44 1f       	adc	r20, r20
 348:	aa 1f       	adc	r26, r26
 34a:	a9 f3       	breq	.-22     	; 0x336 <__divsf3_pse+0x10>
 34c:	33 d0       	rcall	.+102    	; 0x3b4 <__divsf3_pse+0x8e>
 34e:	0e 2e       	mov	r0, r30
 350:	3a f0       	brmi	.+14     	; 0x360 <__divsf3_pse+0x3a>
 352:	e0 e8       	ldi	r30, 0x80	; 128
 354:	30 d0       	rcall	.+96     	; 0x3b6 <__divsf3_pse+0x90>
 356:	91 50       	subi	r25, 0x01	; 1
 358:	50 40       	sbci	r21, 0x00	; 0
 35a:	e6 95       	lsr	r30
 35c:	00 1c       	adc	r0, r0
 35e:	ca f7       	brpl	.-14     	; 0x352 <__divsf3_pse+0x2c>
 360:	29 d0       	rcall	.+82     	; 0x3b4 <__divsf3_pse+0x8e>
 362:	fe 2f       	mov	r31, r30
 364:	27 d0       	rcall	.+78     	; 0x3b4 <__divsf3_pse+0x8e>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	88 1f       	adc	r24, r24
 36c:	bb 1f       	adc	r27, r27
 36e:	26 17       	cp	r18, r22
 370:	37 07       	cpc	r19, r23
 372:	48 07       	cpc	r20, r24
 374:	ab 07       	cpc	r26, r27
 376:	b0 e8       	ldi	r27, 0x80	; 128
 378:	09 f0       	breq	.+2      	; 0x37c <__divsf3_pse+0x56>
 37a:	bb 0b       	sbc	r27, r27
 37c:	80 2d       	mov	r24, r0
 37e:	bf 01       	movw	r22, r30
 380:	ff 27       	eor	r31, r31
 382:	93 58       	subi	r25, 0x83	; 131
 384:	5f 4f       	sbci	r21, 0xFF	; 255
 386:	2a f0       	brmi	.+10     	; 0x392 <__divsf3_pse+0x6c>
 388:	9e 3f       	cpi	r25, 0xFE	; 254
 38a:	51 05       	cpc	r21, r1
 38c:	68 f0       	brcs	.+26     	; 0x3a8 <__divsf3_pse+0x82>
 38e:	79 c0       	rjmp	.+242    	; 0x482 <__fp_inf>
 390:	c3 c0       	rjmp	.+390    	; 0x518 <__fp_szero>
 392:	5f 3f       	cpi	r21, 0xFF	; 255
 394:	ec f3       	brlt	.-6      	; 0x390 <__divsf3_pse+0x6a>
 396:	98 3e       	cpi	r25, 0xE8	; 232
 398:	dc f3       	brlt	.-10     	; 0x390 <__divsf3_pse+0x6a>
 39a:	86 95       	lsr	r24
 39c:	77 95       	ror	r23
 39e:	67 95       	ror	r22
 3a0:	b7 95       	ror	r27
 3a2:	f7 95       	ror	r31
 3a4:	9f 5f       	subi	r25, 0xFF	; 255
 3a6:	c9 f7       	brne	.-14     	; 0x39a <__divsf3_pse+0x74>
 3a8:	88 0f       	add	r24, r24
 3aa:	91 1d       	adc	r25, r1
 3ac:	96 95       	lsr	r25
 3ae:	87 95       	ror	r24
 3b0:	97 f9       	bld	r25, 7
 3b2:	08 95       	ret
 3b4:	e1 e0       	ldi	r30, 0x01	; 1
 3b6:	66 0f       	add	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	88 1f       	adc	r24, r24
 3bc:	bb 1f       	adc	r27, r27
 3be:	62 17       	cp	r22, r18
 3c0:	73 07       	cpc	r23, r19
 3c2:	84 07       	cpc	r24, r20
 3c4:	ba 07       	cpc	r27, r26
 3c6:	20 f0       	brcs	.+8      	; 0x3d0 <__divsf3_pse+0xaa>
 3c8:	62 1b       	sub	r22, r18
 3ca:	73 0b       	sbc	r23, r19
 3cc:	84 0b       	sbc	r24, r20
 3ce:	ba 0b       	sbc	r27, r26
 3d0:	ee 1f       	adc	r30, r30
 3d2:	88 f7       	brcc	.-30     	; 0x3b6 <__divsf3_pse+0x90>
 3d4:	e0 95       	com	r30
 3d6:	08 95       	ret

000003d8 <__fixsfsi>:
 3d8:	04 d0       	rcall	.+8      	; 0x3e2 <__fixunssfsi>
 3da:	68 94       	set
 3dc:	b1 11       	cpse	r27, r1
 3de:	9c c0       	rjmp	.+312    	; 0x518 <__fp_szero>
 3e0:	08 95       	ret

000003e2 <__fixunssfsi>:
 3e2:	7f d0       	rcall	.+254    	; 0x4e2 <__fp_splitA>
 3e4:	88 f0       	brcs	.+34     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e6:	9f 57       	subi	r25, 0x7F	; 127
 3e8:	90 f0       	brcs	.+36     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3ea:	b9 2f       	mov	r27, r25
 3ec:	99 27       	eor	r25, r25
 3ee:	b7 51       	subi	r27, 0x17	; 23
 3f0:	a0 f0       	brcs	.+40     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f2:	d1 f0       	breq	.+52     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	1a f0       	brmi	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	ba 95       	dec	r27
 400:	c9 f7       	brne	.-14     	; 0x3f4 <__fixunssfsi+0x12>
 402:	12 c0       	rjmp	.+36     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 404:	b1 30       	cpi	r27, 0x01	; 1
 406:	81 f0       	breq	.+32     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 408:	86 d0       	rcall	.+268    	; 0x516 <__fp_zero>
 40a:	b1 e0       	ldi	r27, 0x01	; 1
 40c:	08 95       	ret
 40e:	83 c0       	rjmp	.+262    	; 0x516 <__fp_zero>
 410:	67 2f       	mov	r22, r23
 412:	78 2f       	mov	r23, r24
 414:	88 27       	eor	r24, r24
 416:	b8 5f       	subi	r27, 0xF8	; 248
 418:	39 f0       	breq	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41a:	b9 3f       	cpi	r27, 0xF9	; 249
 41c:	cc f3       	brlt	.-14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 41e:	86 95       	lsr	r24
 420:	77 95       	ror	r23
 422:	67 95       	ror	r22
 424:	b3 95       	inc	r27
 426:	d9 f7       	brne	.-10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 428:	3e f4       	brtc	.+14     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42a:	90 95       	com	r25
 42c:	80 95       	com	r24
 42e:	70 95       	com	r23
 430:	61 95       	neg	r22
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	08 95       	ret

0000043a <__fp_cmp>:
 43a:	99 0f       	add	r25, r25
 43c:	00 08       	sbc	r0, r0
 43e:	55 0f       	add	r21, r21
 440:	aa 0b       	sbc	r26, r26
 442:	e0 e8       	ldi	r30, 0x80	; 128
 444:	fe ef       	ldi	r31, 0xFE	; 254
 446:	16 16       	cp	r1, r22
 448:	17 06       	cpc	r1, r23
 44a:	e8 07       	cpc	r30, r24
 44c:	f9 07       	cpc	r31, r25
 44e:	c0 f0       	brcs	.+48     	; 0x480 <__fp_cmp+0x46>
 450:	12 16       	cp	r1, r18
 452:	13 06       	cpc	r1, r19
 454:	e4 07       	cpc	r30, r20
 456:	f5 07       	cpc	r31, r21
 458:	98 f0       	brcs	.+38     	; 0x480 <__fp_cmp+0x46>
 45a:	62 1b       	sub	r22, r18
 45c:	73 0b       	sbc	r23, r19
 45e:	84 0b       	sbc	r24, r20
 460:	95 0b       	sbc	r25, r21
 462:	39 f4       	brne	.+14     	; 0x472 <__fp_cmp+0x38>
 464:	0a 26       	eor	r0, r26
 466:	61 f0       	breq	.+24     	; 0x480 <__fp_cmp+0x46>
 468:	23 2b       	or	r18, r19
 46a:	24 2b       	or	r18, r20
 46c:	25 2b       	or	r18, r21
 46e:	21 f4       	brne	.+8      	; 0x478 <__fp_cmp+0x3e>
 470:	08 95       	ret
 472:	0a 26       	eor	r0, r26
 474:	09 f4       	brne	.+2      	; 0x478 <__fp_cmp+0x3e>
 476:	a1 40       	sbci	r26, 0x01	; 1
 478:	a6 95       	lsr	r26
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	81 1d       	adc	r24, r1
 47e:	81 1d       	adc	r24, r1
 480:	08 95       	ret

00000482 <__fp_inf>:
 482:	97 f9       	bld	r25, 7
 484:	9f 67       	ori	r25, 0x7F	; 127
 486:	80 e8       	ldi	r24, 0x80	; 128
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	08 95       	ret

0000048e <__fp_nan>:
 48e:	9f ef       	ldi	r25, 0xFF	; 255
 490:	80 ec       	ldi	r24, 0xC0	; 192
 492:	08 95       	ret

00000494 <__fp_pscA>:
 494:	00 24       	eor	r0, r0
 496:	0a 94       	dec	r0
 498:	16 16       	cp	r1, r22
 49a:	17 06       	cpc	r1, r23
 49c:	18 06       	cpc	r1, r24
 49e:	09 06       	cpc	r0, r25
 4a0:	08 95       	ret

000004a2 <__fp_pscB>:
 4a2:	00 24       	eor	r0, r0
 4a4:	0a 94       	dec	r0
 4a6:	12 16       	cp	r1, r18
 4a8:	13 06       	cpc	r1, r19
 4aa:	14 06       	cpc	r1, r20
 4ac:	05 06       	cpc	r0, r21
 4ae:	08 95       	ret

000004b0 <__fp_round>:
 4b0:	09 2e       	mov	r0, r25
 4b2:	03 94       	inc	r0
 4b4:	00 0c       	add	r0, r0
 4b6:	11 f4       	brne	.+4      	; 0x4bc <__fp_round+0xc>
 4b8:	88 23       	and	r24, r24
 4ba:	52 f0       	brmi	.+20     	; 0x4d0 <__fp_round+0x20>
 4bc:	bb 0f       	add	r27, r27
 4be:	40 f4       	brcc	.+16     	; 0x4d0 <__fp_round+0x20>
 4c0:	bf 2b       	or	r27, r31
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__fp_round+0x18>
 4c4:	60 ff       	sbrs	r22, 0
 4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__fp_round+0x20>
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <__fp_split3>:
 4d2:	57 fd       	sbrc	r21, 7
 4d4:	90 58       	subi	r25, 0x80	; 128
 4d6:	44 0f       	add	r20, r20
 4d8:	55 1f       	adc	r21, r21
 4da:	59 f0       	breq	.+22     	; 0x4f2 <__fp_splitA+0x10>
 4dc:	5f 3f       	cpi	r21, 0xFF	; 255
 4de:	71 f0       	breq	.+28     	; 0x4fc <__fp_splitA+0x1a>
 4e0:	47 95       	ror	r20

000004e2 <__fp_splitA>:
 4e2:	88 0f       	add	r24, r24
 4e4:	97 fb       	bst	r25, 7
 4e6:	99 1f       	adc	r25, r25
 4e8:	61 f0       	breq	.+24     	; 0x502 <__fp_splitA+0x20>
 4ea:	9f 3f       	cpi	r25, 0xFF	; 255
 4ec:	79 f0       	breq	.+30     	; 0x50c <__fp_splitA+0x2a>
 4ee:	87 95       	ror	r24
 4f0:	08 95       	ret
 4f2:	12 16       	cp	r1, r18
 4f4:	13 06       	cpc	r1, r19
 4f6:	14 06       	cpc	r1, r20
 4f8:	55 1f       	adc	r21, r21
 4fa:	f2 cf       	rjmp	.-28     	; 0x4e0 <__fp_split3+0xe>
 4fc:	46 95       	lsr	r20
 4fe:	f1 df       	rcall	.-30     	; 0x4e2 <__fp_splitA>
 500:	08 c0       	rjmp	.+16     	; 0x512 <__fp_splitA+0x30>
 502:	16 16       	cp	r1, r22
 504:	17 06       	cpc	r1, r23
 506:	18 06       	cpc	r1, r24
 508:	99 1f       	adc	r25, r25
 50a:	f1 cf       	rjmp	.-30     	; 0x4ee <__fp_splitA+0xc>
 50c:	86 95       	lsr	r24
 50e:	71 05       	cpc	r23, r1
 510:	61 05       	cpc	r22, r1
 512:	08 94       	sec
 514:	08 95       	ret

00000516 <__fp_zero>:
 516:	e8 94       	clt

00000518 <__fp_szero>:
 518:	bb 27       	eor	r27, r27
 51a:	66 27       	eor	r22, r22
 51c:	77 27       	eor	r23, r23
 51e:	cb 01       	movw	r24, r22
 520:	97 f9       	bld	r25, 7
 522:	08 95       	ret

00000524 <__gesf2>:
 524:	8a df       	rcall	.-236    	; 0x43a <__fp_cmp>
 526:	08 f4       	brcc	.+2      	; 0x52a <__gesf2+0x6>
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	08 95       	ret

0000052c <__mulsf3>:
 52c:	0b d0       	rcall	.+22     	; 0x544 <__mulsf3x>
 52e:	c0 cf       	rjmp	.-128    	; 0x4b0 <__fp_round>
 530:	b1 df       	rcall	.-158    	; 0x494 <__fp_pscA>
 532:	28 f0       	brcs	.+10     	; 0x53e <__mulsf3+0x12>
 534:	b6 df       	rcall	.-148    	; 0x4a2 <__fp_pscB>
 536:	18 f0       	brcs	.+6      	; 0x53e <__mulsf3+0x12>
 538:	95 23       	and	r25, r21
 53a:	09 f0       	breq	.+2      	; 0x53e <__mulsf3+0x12>
 53c:	a2 cf       	rjmp	.-188    	; 0x482 <__fp_inf>
 53e:	a7 cf       	rjmp	.-178    	; 0x48e <__fp_nan>
 540:	11 24       	eor	r1, r1
 542:	ea cf       	rjmp	.-44     	; 0x518 <__fp_szero>

00000544 <__mulsf3x>:
 544:	c6 df       	rcall	.-116    	; 0x4d2 <__fp_split3>
 546:	a0 f3       	brcs	.-24     	; 0x530 <__mulsf3+0x4>

00000548 <__mulsf3_pse>:
 548:	95 9f       	mul	r25, r21
 54a:	d1 f3       	breq	.-12     	; 0x540 <__mulsf3+0x14>
 54c:	95 0f       	add	r25, r21
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	55 1f       	adc	r21, r21
 552:	62 9f       	mul	r22, r18
 554:	f0 01       	movw	r30, r0
 556:	72 9f       	mul	r23, r18
 558:	bb 27       	eor	r27, r27
 55a:	f0 0d       	add	r31, r0
 55c:	b1 1d       	adc	r27, r1
 55e:	63 9f       	mul	r22, r19
 560:	aa 27       	eor	r26, r26
 562:	f0 0d       	add	r31, r0
 564:	b1 1d       	adc	r27, r1
 566:	aa 1f       	adc	r26, r26
 568:	64 9f       	mul	r22, r20
 56a:	66 27       	eor	r22, r22
 56c:	b0 0d       	add	r27, r0
 56e:	a1 1d       	adc	r26, r1
 570:	66 1f       	adc	r22, r22
 572:	82 9f       	mul	r24, r18
 574:	22 27       	eor	r18, r18
 576:	b0 0d       	add	r27, r0
 578:	a1 1d       	adc	r26, r1
 57a:	62 1f       	adc	r22, r18
 57c:	73 9f       	mul	r23, r19
 57e:	b0 0d       	add	r27, r0
 580:	a1 1d       	adc	r26, r1
 582:	62 1f       	adc	r22, r18
 584:	83 9f       	mul	r24, r19
 586:	a0 0d       	add	r26, r0
 588:	61 1d       	adc	r22, r1
 58a:	22 1f       	adc	r18, r18
 58c:	74 9f       	mul	r23, r20
 58e:	33 27       	eor	r19, r19
 590:	a0 0d       	add	r26, r0
 592:	61 1d       	adc	r22, r1
 594:	23 1f       	adc	r18, r19
 596:	84 9f       	mul	r24, r20
 598:	60 0d       	add	r22, r0
 59a:	21 1d       	adc	r18, r1
 59c:	82 2f       	mov	r24, r18
 59e:	76 2f       	mov	r23, r22
 5a0:	6a 2f       	mov	r22, r26
 5a2:	11 24       	eor	r1, r1
 5a4:	9f 57       	subi	r25, 0x7F	; 127
 5a6:	50 40       	sbci	r21, 0x00	; 0
 5a8:	8a f0       	brmi	.+34     	; 0x5cc <__mulsf3_pse+0x84>
 5aa:	e1 f0       	breq	.+56     	; 0x5e4 <__mulsf3_pse+0x9c>
 5ac:	88 23       	and	r24, r24
 5ae:	4a f0       	brmi	.+18     	; 0x5c2 <__mulsf3_pse+0x7a>
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	bb 1f       	adc	r27, r27
 5b6:	66 1f       	adc	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	91 50       	subi	r25, 0x01	; 1
 5be:	50 40       	sbci	r21, 0x00	; 0
 5c0:	a9 f7       	brne	.-22     	; 0x5ac <__mulsf3_pse+0x64>
 5c2:	9e 3f       	cpi	r25, 0xFE	; 254
 5c4:	51 05       	cpc	r21, r1
 5c6:	70 f0       	brcs	.+28     	; 0x5e4 <__mulsf3_pse+0x9c>
 5c8:	5c cf       	rjmp	.-328    	; 0x482 <__fp_inf>
 5ca:	a6 cf       	rjmp	.-180    	; 0x518 <__fp_szero>
 5cc:	5f 3f       	cpi	r21, 0xFF	; 255
 5ce:	ec f3       	brlt	.-6      	; 0x5ca <__mulsf3_pse+0x82>
 5d0:	98 3e       	cpi	r25, 0xE8	; 232
 5d2:	dc f3       	brlt	.-10     	; 0x5ca <__mulsf3_pse+0x82>
 5d4:	86 95       	lsr	r24
 5d6:	77 95       	ror	r23
 5d8:	67 95       	ror	r22
 5da:	b7 95       	ror	r27
 5dc:	f7 95       	ror	r31
 5de:	e7 95       	ror	r30
 5e0:	9f 5f       	subi	r25, 0xFF	; 255
 5e2:	c1 f7       	brne	.-16     	; 0x5d4 <__mulsf3_pse+0x8c>
 5e4:	fe 2b       	or	r31, r30
 5e6:	88 0f       	add	r24, r24
 5e8:	91 1d       	adc	r25, r1
 5ea:	96 95       	lsr	r25
 5ec:	87 95       	ror	r24
 5ee:	97 f9       	bld	r25, 7
 5f0:	08 95       	ret

000005f2 <__tablejump2__>:
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	00 24       	eor	r0, r0
 5f8:	00 1c       	adc	r0, r0
 5fa:	0b be       	out	0x3b, r0	; 59
 5fc:	07 90       	elpm	r0, Z+
 5fe:	f6 91       	elpm	r31, Z
 600:	e0 2d       	mov	r30, r0
 602:	09 94       	ijmp

00000604 <_exit>:
 604:	f8 94       	cli

00000606 <__stop_program>:
 606:	ff cf       	rjmp	.-2      	; 0x606 <__stop_program>
